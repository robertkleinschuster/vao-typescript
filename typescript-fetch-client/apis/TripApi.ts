/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TripList,
} from '../models/index';
import {
    TripListFromJSON,
    TripListToJSON,
} from '../models/index';

export interface Verb8Request {
    requestId?: string;
    format?: Verb8FormatEnum;
    jsonpCallback?: string;
    lang?: string;
    originId?: string;
    originExtId?: string;
    originCoordLat?: number;
    originCoordLong?: number;
    originCoordName?: string;
    originCoordType?: string;
    destId?: string;
    destExtId?: string;
    destCoordLat?: number;
    destCoordLong?: number;
    destCoordName?: string;
    destCoordType?: string;
    via?: string;
    viaId?: string;
    viaWaitTime?: number;
    avoid?: string;
    avoidId?: string;
    viaGis?: string;
    changeTimePercent?: number;
    minChangeTime?: number;
    maxChangeTime?: number;
    addChangeTime?: number;
    maxChange?: number;
    date?: string;
    time?: string;
    searchForArrival?: Verb8SearchForArrivalEnum;
    numF?: number;
    numB?: number;
    context?: string;
    poly?: Verb8PolyEnum;
    polyEnc?: Verb8PolyEncEnum;
    passlist?: Verb8PasslistEnum;
    products?: number;
    operators?: string;
    categories?: string;
    categoryFlags?: string;
    attributes?: string;
    sattributes?: string;
    fattributes?: string;
    lines?: string;
    lineids?: string;
    avoidPaths?: string;
    originWalk?: string;
    originBike?: string;
    originCar?: string;
    originTaxi?: string;
    originPark?: string;
    originMeta?: string;
    destWalk?: string;
    destBike?: string;
    destCar?: string;
    destTaxi?: string;
    destPark?: string;
    destMeta?: string;
    totalWalk?: string;
    totalBike?: string;
    totalCar?: string;
    totalTaxi?: string;
    totalMeta?: string;
    gisProducts?: string;
    includeIv?: Verb8IncludeIvEnum;
    ivOnly?: Verb8IvOnlyEnum;
    mobilityProfile?: string;
    bikeCarriage?: Verb8BikeCarriageEnum;
    bikeCarriageType?: Verb8BikeCarriageTypeEnum;
    sleepingCar?: Verb8SleepingCarEnum;
    couchetteCoach?: Verb8CouchetteCoachEnum;
    showPassingPoints?: Verb8ShowPassingPointsEnum;
    baim?: Verb8BaimEnum;
    eco?: Verb8EcoEnum;
    ecoCmp?: Verb8EcoCmpEnum;
    ecoParams?: string;
    rtMode?: Verb8RtModeEnum;
    unsharp?: Verb8UnsharpEnum;
    trainFilter?: string;
    economic?: Verb8EconomicEnum;
    allowFootpathEquivalences?: Verb8AllowFootpathEquivalencesEnum;
    groupFilter?: string;
    blockingList?: string;
    blockedEdges?: string;
    trainComposition?: Verb8TrainCompositionEnum;
    includeEarlier?: Verb8IncludeEarlierEnum;
    withICTAlternatives?: Verb8WithICTAlternativesEnum;
    tariff?: Verb8TariffEnum;
    trafficMessages?: Verb8TrafficMessagesEnum;
    travellerProfileData?: string;
    withFreq?: Verb8WithFreqEnum;
    withJourneyBoundaryPoints?: Verb8WithJourneyBoundaryPointsEnum;
}

/**
 * 
 */
export class TripApi extends runtime.BaseAPI {

    /**
     * Trip search
     */
    async verb8Raw(requestParameters: Verb8Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TripList>> {
        const queryParameters: any = {};

        if (requestParameters.requestId !== undefined) {
            queryParameters['requestId'] = requestParameters.requestId;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.jsonpCallback !== undefined) {
            queryParameters['jsonpCallback'] = requestParameters.jsonpCallback;
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.originId !== undefined) {
            queryParameters['originId'] = requestParameters.originId;
        }

        if (requestParameters.originExtId !== undefined) {
            queryParameters['originExtId'] = requestParameters.originExtId;
        }

        if (requestParameters.originCoordLat !== undefined) {
            queryParameters['originCoordLat'] = requestParameters.originCoordLat;
        }

        if (requestParameters.originCoordLong !== undefined) {
            queryParameters['originCoordLong'] = requestParameters.originCoordLong;
        }

        if (requestParameters.originCoordName !== undefined) {
            queryParameters['originCoordName'] = requestParameters.originCoordName;
        }

        if (requestParameters.originCoordType !== undefined) {
            queryParameters['originCoordType'] = requestParameters.originCoordType;
        }

        if (requestParameters.destId !== undefined) {
            queryParameters['destId'] = requestParameters.destId;
        }

        if (requestParameters.destExtId !== undefined) {
            queryParameters['destExtId'] = requestParameters.destExtId;
        }

        if (requestParameters.destCoordLat !== undefined) {
            queryParameters['destCoordLat'] = requestParameters.destCoordLat;
        }

        if (requestParameters.destCoordLong !== undefined) {
            queryParameters['destCoordLong'] = requestParameters.destCoordLong;
        }

        if (requestParameters.destCoordName !== undefined) {
            queryParameters['destCoordName'] = requestParameters.destCoordName;
        }

        if (requestParameters.destCoordType !== undefined) {
            queryParameters['destCoordType'] = requestParameters.destCoordType;
        }

        if (requestParameters.via !== undefined) {
            queryParameters['via'] = requestParameters.via;
        }

        if (requestParameters.viaId !== undefined) {
            queryParameters['viaId'] = requestParameters.viaId;
        }

        if (requestParameters.viaWaitTime !== undefined) {
            queryParameters['viaWaitTime'] = requestParameters.viaWaitTime;
        }

        if (requestParameters.avoid !== undefined) {
            queryParameters['avoid'] = requestParameters.avoid;
        }

        if (requestParameters.avoidId !== undefined) {
            queryParameters['avoidId'] = requestParameters.avoidId;
        }

        if (requestParameters.viaGis !== undefined) {
            queryParameters['viaGis'] = requestParameters.viaGis;
        }

        if (requestParameters.changeTimePercent !== undefined) {
            queryParameters['changeTimePercent'] = requestParameters.changeTimePercent;
        }

        if (requestParameters.minChangeTime !== undefined) {
            queryParameters['minChangeTime'] = requestParameters.minChangeTime;
        }

        if (requestParameters.maxChangeTime !== undefined) {
            queryParameters['maxChangeTime'] = requestParameters.maxChangeTime;
        }

        if (requestParameters.addChangeTime !== undefined) {
            queryParameters['addChangeTime'] = requestParameters.addChangeTime;
        }

        if (requestParameters.maxChange !== undefined) {
            queryParameters['maxChange'] = requestParameters.maxChange;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.searchForArrival !== undefined) {
            queryParameters['searchForArrival'] = requestParameters.searchForArrival;
        }

        if (requestParameters.numF !== undefined) {
            queryParameters['numF'] = requestParameters.numF;
        }

        if (requestParameters.numB !== undefined) {
            queryParameters['numB'] = requestParameters.numB;
        }

        if (requestParameters.context !== undefined) {
            queryParameters['context'] = requestParameters.context;
        }

        if (requestParameters.poly !== undefined) {
            queryParameters['poly'] = requestParameters.poly;
        }

        if (requestParameters.polyEnc !== undefined) {
            queryParameters['polyEnc'] = requestParameters.polyEnc;
        }

        if (requestParameters.passlist !== undefined) {
            queryParameters['passlist'] = requestParameters.passlist;
        }

        if (requestParameters.products !== undefined) {
            queryParameters['products'] = requestParameters.products;
        }

        if (requestParameters.operators !== undefined) {
            queryParameters['operators'] = requestParameters.operators;
        }

        if (requestParameters.categories !== undefined) {
            queryParameters['categories'] = requestParameters.categories;
        }

        if (requestParameters.categoryFlags !== undefined) {
            queryParameters['categoryFlags'] = requestParameters.categoryFlags;
        }

        if (requestParameters.attributes !== undefined) {
            queryParameters['attributes'] = requestParameters.attributes;
        }

        if (requestParameters.sattributes !== undefined) {
            queryParameters['sattributes'] = requestParameters.sattributes;
        }

        if (requestParameters.fattributes !== undefined) {
            queryParameters['fattributes'] = requestParameters.fattributes;
        }

        if (requestParameters.lines !== undefined) {
            queryParameters['lines'] = requestParameters.lines;
        }

        if (requestParameters.lineids !== undefined) {
            queryParameters['lineids'] = requestParameters.lineids;
        }

        if (requestParameters.avoidPaths !== undefined) {
            queryParameters['avoidPaths'] = requestParameters.avoidPaths;
        }

        if (requestParameters.originWalk !== undefined) {
            queryParameters['originWalk'] = requestParameters.originWalk;
        }

        if (requestParameters.originBike !== undefined) {
            queryParameters['originBike'] = requestParameters.originBike;
        }

        if (requestParameters.originCar !== undefined) {
            queryParameters['originCar'] = requestParameters.originCar;
        }

        if (requestParameters.originTaxi !== undefined) {
            queryParameters['originTaxi'] = requestParameters.originTaxi;
        }

        if (requestParameters.originPark !== undefined) {
            queryParameters['originPark'] = requestParameters.originPark;
        }

        if (requestParameters.originMeta !== undefined) {
            queryParameters['originMeta'] = requestParameters.originMeta;
        }

        if (requestParameters.destWalk !== undefined) {
            queryParameters['destWalk'] = requestParameters.destWalk;
        }

        if (requestParameters.destBike !== undefined) {
            queryParameters['destBike'] = requestParameters.destBike;
        }

        if (requestParameters.destCar !== undefined) {
            queryParameters['destCar'] = requestParameters.destCar;
        }

        if (requestParameters.destTaxi !== undefined) {
            queryParameters['destTaxi'] = requestParameters.destTaxi;
        }

        if (requestParameters.destPark !== undefined) {
            queryParameters['destPark'] = requestParameters.destPark;
        }

        if (requestParameters.destMeta !== undefined) {
            queryParameters['destMeta'] = requestParameters.destMeta;
        }

        if (requestParameters.totalWalk !== undefined) {
            queryParameters['totalWalk'] = requestParameters.totalWalk;
        }

        if (requestParameters.totalBike !== undefined) {
            queryParameters['totalBike'] = requestParameters.totalBike;
        }

        if (requestParameters.totalCar !== undefined) {
            queryParameters['totalCar'] = requestParameters.totalCar;
        }

        if (requestParameters.totalTaxi !== undefined) {
            queryParameters['totalTaxi'] = requestParameters.totalTaxi;
        }

        if (requestParameters.totalMeta !== undefined) {
            queryParameters['totalMeta'] = requestParameters.totalMeta;
        }

        if (requestParameters.gisProducts !== undefined) {
            queryParameters['gisProducts'] = requestParameters.gisProducts;
        }

        if (requestParameters.includeIv !== undefined) {
            queryParameters['includeIv'] = requestParameters.includeIv;
        }

        if (requestParameters.ivOnly !== undefined) {
            queryParameters['ivOnly'] = requestParameters.ivOnly;
        }

        if (requestParameters.mobilityProfile !== undefined) {
            queryParameters['mobilityProfile'] = requestParameters.mobilityProfile;
        }

        if (requestParameters.bikeCarriage !== undefined) {
            queryParameters['bikeCarriage'] = requestParameters.bikeCarriage;
        }

        if (requestParameters.bikeCarriageType !== undefined) {
            queryParameters['bikeCarriageType'] = requestParameters.bikeCarriageType;
        }

        if (requestParameters.sleepingCar !== undefined) {
            queryParameters['sleepingCar'] = requestParameters.sleepingCar;
        }

        if (requestParameters.couchetteCoach !== undefined) {
            queryParameters['couchetteCoach'] = requestParameters.couchetteCoach;
        }

        if (requestParameters.showPassingPoints !== undefined) {
            queryParameters['showPassingPoints'] = requestParameters.showPassingPoints;
        }

        if (requestParameters.baim !== undefined) {
            queryParameters['baim'] = requestParameters.baim;
        }

        if (requestParameters.eco !== undefined) {
            queryParameters['eco'] = requestParameters.eco;
        }

        if (requestParameters.ecoCmp !== undefined) {
            queryParameters['ecoCmp'] = requestParameters.ecoCmp;
        }

        if (requestParameters.ecoParams !== undefined) {
            queryParameters['ecoParams'] = requestParameters.ecoParams;
        }

        if (requestParameters.rtMode !== undefined) {
            queryParameters['rtMode'] = requestParameters.rtMode;
        }

        if (requestParameters.unsharp !== undefined) {
            queryParameters['unsharp'] = requestParameters.unsharp;
        }

        if (requestParameters.trainFilter !== undefined) {
            queryParameters['trainFilter'] = requestParameters.trainFilter;
        }

        if (requestParameters.economic !== undefined) {
            queryParameters['economic'] = requestParameters.economic;
        }

        if (requestParameters.allowFootpathEquivalences !== undefined) {
            queryParameters['allowFootpathEquivalences'] = requestParameters.allowFootpathEquivalences;
        }

        if (requestParameters.groupFilter !== undefined) {
            queryParameters['groupFilter'] = requestParameters.groupFilter;
        }

        if (requestParameters.blockingList !== undefined) {
            queryParameters['blockingList'] = requestParameters.blockingList;
        }

        if (requestParameters.blockedEdges !== undefined) {
            queryParameters['blockedEdges'] = requestParameters.blockedEdges;
        }

        if (requestParameters.trainComposition !== undefined) {
            queryParameters['trainComposition'] = requestParameters.trainComposition;
        }

        if (requestParameters.includeEarlier !== undefined) {
            queryParameters['includeEarlier'] = requestParameters.includeEarlier;
        }

        if (requestParameters.withICTAlternatives !== undefined) {
            queryParameters['withICTAlternatives'] = requestParameters.withICTAlternatives;
        }

        if (requestParameters.tariff !== undefined) {
            queryParameters['tariff'] = requestParameters.tariff;
        }

        if (requestParameters.trafficMessages !== undefined) {
            queryParameters['trafficMessages'] = requestParameters.trafficMessages;
        }

        if (requestParameters.travellerProfileData !== undefined) {
            queryParameters['travellerProfileData'] = requestParameters.travellerProfileData;
        }

        if (requestParameters.withFreq !== undefined) {
            queryParameters['withFreq'] = requestParameters.withFreq;
        }

        if (requestParameters.withJourneyBoundaryPoints !== undefined) {
            queryParameters['withJourneyBoundaryPoints'] = requestParameters.withJourneyBoundaryPoints;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["accessId"] = this.configuration.apiKey("accessId"); // accessId authentication
        }

        const response = await this.request({
            path: `/trip`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TripListFromJSON(jsonValue));
    }

    /**
     * Trip search
     */
    async verb8(requestParameters: Verb8Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TripList> {
        const response = await this.verb8Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Verb8FormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonp: 'jsonp'
} as const;
export type Verb8FormatEnum = typeof Verb8FormatEnum[keyof typeof Verb8FormatEnum];
/**
 * @export
 */
export const Verb8SearchForArrivalEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8SearchForArrivalEnum = typeof Verb8SearchForArrivalEnum[keyof typeof Verb8SearchForArrivalEnum];
/**
 * @export
 */
export const Verb8PolyEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8PolyEnum = typeof Verb8PolyEnum[keyof typeof Verb8PolyEnum];
/**
 * @export
 */
export const Verb8PolyEncEnum = {
    Dlt: 'DLT',
    Gpa: 'GPA',
    N: 'N'
} as const;
export type Verb8PolyEncEnum = typeof Verb8PolyEncEnum[keyof typeof Verb8PolyEncEnum];
/**
 * @export
 */
export const Verb8PasslistEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8PasslistEnum = typeof Verb8PasslistEnum[keyof typeof Verb8PasslistEnum];
/**
 * @export
 */
export const Verb8IncludeIvEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8IncludeIvEnum = typeof Verb8IncludeIvEnum[keyof typeof Verb8IncludeIvEnum];
/**
 * @export
 */
export const Verb8IvOnlyEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8IvOnlyEnum = typeof Verb8IvOnlyEnum[keyof typeof Verb8IvOnlyEnum];
/**
 * @export
 */
export const Verb8BikeCarriageEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8BikeCarriageEnum = typeof Verb8BikeCarriageEnum[keyof typeof Verb8BikeCarriageEnum];
/**
 * @export
 */
export const Verb8BikeCarriageTypeEnum = {
    Singlebikes: 'SINGLEBIKES',
    Smallgroups: 'SMALLGROUPS',
    Largegroups: 'LARGEGROUPS'
} as const;
export type Verb8BikeCarriageTypeEnum = typeof Verb8BikeCarriageTypeEnum[keyof typeof Verb8BikeCarriageTypeEnum];
/**
 * @export
 */
export const Verb8SleepingCarEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8SleepingCarEnum = typeof Verb8SleepingCarEnum[keyof typeof Verb8SleepingCarEnum];
/**
 * @export
 */
export const Verb8CouchetteCoachEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8CouchetteCoachEnum = typeof Verb8CouchetteCoachEnum[keyof typeof Verb8CouchetteCoachEnum];
/**
 * @export
 */
export const Verb8ShowPassingPointsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8ShowPassingPointsEnum = typeof Verb8ShowPassingPointsEnum[keyof typeof Verb8ShowPassingPointsEnum];
/**
 * @export
 */
export const Verb8BaimEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8BaimEnum = typeof Verb8BaimEnum[keyof typeof Verb8BaimEnum];
/**
 * @export
 */
export const Verb8EcoEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8EcoEnum = typeof Verb8EcoEnum[keyof typeof Verb8EcoEnum];
/**
 * @export
 */
export const Verb8EcoCmpEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8EcoCmpEnum = typeof Verb8EcoCmpEnum[keyof typeof Verb8EcoCmpEnum];
/**
 * @export
 */
export const Verb8RtModeEnum = {
    Full: 'FULL',
    Infos: 'INFOS',
    Off: 'OFF',
    Realtime: 'REALTIME',
    ServerDefault: 'SERVER_DEFAULT'
} as const;
export type Verb8RtModeEnum = typeof Verb8RtModeEnum[keyof typeof Verb8RtModeEnum];
/**
 * @export
 */
export const Verb8UnsharpEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8UnsharpEnum = typeof Verb8UnsharpEnum[keyof typeof Verb8UnsharpEnum];
/**
 * @export
 */
export const Verb8EconomicEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8EconomicEnum = typeof Verb8EconomicEnum[keyof typeof Verb8EconomicEnum];
/**
 * @export
 */
export const Verb8AllowFootpathEquivalencesEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8AllowFootpathEquivalencesEnum = typeof Verb8AllowFootpathEquivalencesEnum[keyof typeof Verb8AllowFootpathEquivalencesEnum];
/**
 * @export
 */
export const Verb8TrainCompositionEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8TrainCompositionEnum = typeof Verb8TrainCompositionEnum[keyof typeof Verb8TrainCompositionEnum];
/**
 * @export
 */
export const Verb8IncludeEarlierEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8IncludeEarlierEnum = typeof Verb8IncludeEarlierEnum[keyof typeof Verb8IncludeEarlierEnum];
/**
 * @export
 */
export const Verb8WithICTAlternativesEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8WithICTAlternativesEnum = typeof Verb8WithICTAlternativesEnum[keyof typeof Verb8WithICTAlternativesEnum];
/**
 * @export
 */
export const Verb8TariffEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8TariffEnum = typeof Verb8TariffEnum[keyof typeof Verb8TariffEnum];
/**
 * @export
 */
export const Verb8TrafficMessagesEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8TrafficMessagesEnum = typeof Verb8TrafficMessagesEnum[keyof typeof Verb8TrafficMessagesEnum];
/**
 * @export
 */
export const Verb8WithFreqEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8WithFreqEnum = typeof Verb8WithFreqEnum[keyof typeof Verb8WithFreqEnum];
/**
 * @export
 */
export const Verb8WithJourneyBoundaryPointsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb8WithJourneyBoundaryPointsEnum = typeof Verb8WithJourneyBoundaryPointsEnum[keyof typeof Verb8WithJourneyBoundaryPointsEnum];
