/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationList,
} from '../models/index';
import {
    LocationListFromJSON,
    LocationListToJSON,
} from '../models/index';

export interface Verb4Request {
    requestId?: string;
    format?: Verb4FormatEnum;
    jsonpCallback?: string;
    lang?: string;
    id?: string;
    extId?: string;
    date?: string;
    time?: string;
    attributes?: Verb4AttributesEnum;
    infotexts?: Verb4InfotextsEnum;
    products?: Verb4ProductsEnum;
    messages?: Verb4MessagesEnum;
    tariffs?: Verb4TariffsEnum;
    weather?: Verb4WeatherEnum;
}

/**
 * 
 */
export class LocationDetailsApi extends runtime.BaseAPI {

    /**
     * Location Details
     */
    async verb4Raw(requestParameters: Verb4Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationList>> {
        const queryParameters: any = {};

        if (requestParameters.requestId !== undefined) {
            queryParameters['requestId'] = requestParameters.requestId;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.jsonpCallback !== undefined) {
            queryParameters['jsonpCallback'] = requestParameters.jsonpCallback;
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.extId !== undefined) {
            queryParameters['extId'] = requestParameters.extId;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.attributes !== undefined) {
            queryParameters['attributes'] = requestParameters.attributes;
        }

        if (requestParameters.infotexts !== undefined) {
            queryParameters['infotexts'] = requestParameters.infotexts;
        }

        if (requestParameters.products !== undefined) {
            queryParameters['products'] = requestParameters.products;
        }

        if (requestParameters.messages !== undefined) {
            queryParameters['messages'] = requestParameters.messages;
        }

        if (requestParameters.tariffs !== undefined) {
            queryParameters['tariffs'] = requestParameters.tariffs;
        }

        if (requestParameters.weather !== undefined) {
            queryParameters['weather'] = requestParameters.weather;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["accessId"] = this.configuration.apiKey("accessId"); // accessId authentication
        }

        const response = await this.request({
            path: `/location.details`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationListFromJSON(jsonValue));
    }

    /**
     * Location Details
     */
    async verb4(requestParameters: Verb4Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationList> {
        const response = await this.verb4Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Verb4FormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonp: 'jsonp'
} as const;
export type Verb4FormatEnum = typeof Verb4FormatEnum[keyof typeof Verb4FormatEnum];
/**
 * @export
 */
export const Verb4AttributesEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb4AttributesEnum = typeof Verb4AttributesEnum[keyof typeof Verb4AttributesEnum];
/**
 * @export
 */
export const Verb4InfotextsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb4InfotextsEnum = typeof Verb4InfotextsEnum[keyof typeof Verb4InfotextsEnum];
/**
 * @export
 */
export const Verb4ProductsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb4ProductsEnum = typeof Verb4ProductsEnum[keyof typeof Verb4ProductsEnum];
/**
 * @export
 */
export const Verb4MessagesEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb4MessagesEnum = typeof Verb4MessagesEnum[keyof typeof Verb4MessagesEnum];
/**
 * @export
 */
export const Verb4TariffsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb4TariffsEnum = typeof Verb4TariffsEnum[keyof typeof Verb4TariffsEnum];
/**
 * @export
 */
export const Verb4WeatherEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb4WeatherEnum = typeof Verb4WeatherEnum[keyof typeof Verb4WeatherEnum];
