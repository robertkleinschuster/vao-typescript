/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HimMessages,
} from '../models/index';
import {
    HimMessagesFromJSON,
    HimMessagesToJSON,
} from '../models/index';

export interface Verb12Request {
    requestId?: string;
    format?: Verb12FormatEnum;
    jsonpCallback?: string;
    lang?: string;
    dateB?: string;
    dateE?: string;
    timeB?: string;
    timeE?: string;
    weekdays?: string;
    himIds?: string;
    hierarchicalView?: Verb12HierarchicalViewEnum;
    operators?: string;
    categories?: string;
    channels?: string;
    companies?: string;
    lines?: string;
    lineids?: string;
    stations?: string;
    fromstation?: string;
    tostation?: string;
    bothways?: Verb12BothwaysEnum;
    trainnames?: string;
    metas?: string;
    himcategory?: string;
    himtags?: string;
    regions?: string;
    himtext?: string;
    himtexttags?: string;
    additionalfields?: string;
    poly?: Verb12PolyEnum;
    searchmode?: Verb12SearchmodeEnum;
    affectedJourneyMode?: Verb12AffectedJourneyModeEnum;
    affectedJourneyStopMode?: Verb12AffectedJourneyStopModeEnum;
    orderBy?: string;
    minprio?: number;
    maxprio?: number;
    llLat?: number;
    llLon?: number;
    urLat?: number;
    urLon?: number;
}

/**
 * 
 */
export class HimsearchApi extends runtime.BaseAPI {

    /**
     * HIM Search
     */
    async verb12Raw(requestParameters: Verb12Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HimMessages>> {
        const queryParameters: any = {};

        if (requestParameters.requestId !== undefined) {
            queryParameters['requestId'] = requestParameters.requestId;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.jsonpCallback !== undefined) {
            queryParameters['jsonpCallback'] = requestParameters.jsonpCallback;
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.dateB !== undefined) {
            queryParameters['dateB'] = requestParameters.dateB;
        }

        if (requestParameters.dateE !== undefined) {
            queryParameters['dateE'] = requestParameters.dateE;
        }

        if (requestParameters.timeB !== undefined) {
            queryParameters['timeB'] = requestParameters.timeB;
        }

        if (requestParameters.timeE !== undefined) {
            queryParameters['timeE'] = requestParameters.timeE;
        }

        if (requestParameters.weekdays !== undefined) {
            queryParameters['weekdays'] = requestParameters.weekdays;
        }

        if (requestParameters.himIds !== undefined) {
            queryParameters['himIds'] = requestParameters.himIds;
        }

        if (requestParameters.hierarchicalView !== undefined) {
            queryParameters['hierarchicalView'] = requestParameters.hierarchicalView;
        }

        if (requestParameters.operators !== undefined) {
            queryParameters['operators'] = requestParameters.operators;
        }

        if (requestParameters.categories !== undefined) {
            queryParameters['categories'] = requestParameters.categories;
        }

        if (requestParameters.channels !== undefined) {
            queryParameters['channels'] = requestParameters.channels;
        }

        if (requestParameters.companies !== undefined) {
            queryParameters['companies'] = requestParameters.companies;
        }

        if (requestParameters.lines !== undefined) {
            queryParameters['lines'] = requestParameters.lines;
        }

        if (requestParameters.lineids !== undefined) {
            queryParameters['lineids'] = requestParameters.lineids;
        }

        if (requestParameters.stations !== undefined) {
            queryParameters['stations'] = requestParameters.stations;
        }

        if (requestParameters.fromstation !== undefined) {
            queryParameters['fromstation'] = requestParameters.fromstation;
        }

        if (requestParameters.tostation !== undefined) {
            queryParameters['tostation'] = requestParameters.tostation;
        }

        if (requestParameters.bothways !== undefined) {
            queryParameters['bothways'] = requestParameters.bothways;
        }

        if (requestParameters.trainnames !== undefined) {
            queryParameters['trainnames'] = requestParameters.trainnames;
        }

        if (requestParameters.metas !== undefined) {
            queryParameters['metas'] = requestParameters.metas;
        }

        if (requestParameters.himcategory !== undefined) {
            queryParameters['himcategory'] = requestParameters.himcategory;
        }

        if (requestParameters.himtags !== undefined) {
            queryParameters['himtags'] = requestParameters.himtags;
        }

        if (requestParameters.regions !== undefined) {
            queryParameters['regions'] = requestParameters.regions;
        }

        if (requestParameters.himtext !== undefined) {
            queryParameters['himtext'] = requestParameters.himtext;
        }

        if (requestParameters.himtexttags !== undefined) {
            queryParameters['himtexttags'] = requestParameters.himtexttags;
        }

        if (requestParameters.additionalfields !== undefined) {
            queryParameters['additionalfields'] = requestParameters.additionalfields;
        }

        if (requestParameters.poly !== undefined) {
            queryParameters['poly'] = requestParameters.poly;
        }

        if (requestParameters.searchmode !== undefined) {
            queryParameters['searchmode'] = requestParameters.searchmode;
        }

        if (requestParameters.affectedJourneyMode !== undefined) {
            queryParameters['affectedJourneyMode'] = requestParameters.affectedJourneyMode;
        }

        if (requestParameters.affectedJourneyStopMode !== undefined) {
            queryParameters['affectedJourneyStopMode'] = requestParameters.affectedJourneyStopMode;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.minprio !== undefined) {
            queryParameters['minprio'] = requestParameters.minprio;
        }

        if (requestParameters.maxprio !== undefined) {
            queryParameters['maxprio'] = requestParameters.maxprio;
        }

        if (requestParameters.llLat !== undefined) {
            queryParameters['llLat'] = requestParameters.llLat;
        }

        if (requestParameters.llLon !== undefined) {
            queryParameters['llLon'] = requestParameters.llLon;
        }

        if (requestParameters.urLat !== undefined) {
            queryParameters['urLat'] = requestParameters.urLat;
        }

        if (requestParameters.urLon !== undefined) {
            queryParameters['urLon'] = requestParameters.urLon;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["accessId"] = this.configuration.apiKey("accessId"); // accessId authentication
        }

        const response = await this.request({
            path: `/himsearch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HimMessagesFromJSON(jsonValue));
    }

    /**
     * HIM Search
     */
    async verb12(requestParameters: Verb12Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HimMessages> {
        const response = await this.verb12Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Verb12FormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonp: 'jsonp'
} as const;
export type Verb12FormatEnum = typeof Verb12FormatEnum[keyof typeof Verb12FormatEnum];
/**
 * @export
 */
export const Verb12HierarchicalViewEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb12HierarchicalViewEnum = typeof Verb12HierarchicalViewEnum[keyof typeof Verb12HierarchicalViewEnum];
/**
 * @export
 */
export const Verb12BothwaysEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb12BothwaysEnum = typeof Verb12BothwaysEnum[keyof typeof Verb12BothwaysEnum];
/**
 * @export
 */
export const Verb12PolyEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb12PolyEnum = typeof Verb12PolyEnum[keyof typeof Verb12PolyEnum];
/**
 * @export
 */
export const Verb12SearchmodeEnum = {
    Match: 'MATCH',
    Nomatch: 'NOMATCH',
    Tfmatch: 'TFMATCH'
} as const;
export type Verb12SearchmodeEnum = typeof Verb12SearchmodeEnum[keyof typeof Verb12SearchmodeEnum];
/**
 * @export
 */
export const Verb12AffectedJourneyModeEnum = {
    All: 'ALL',
    Off: 'OFF'
} as const;
export type Verb12AffectedJourneyModeEnum = typeof Verb12AffectedJourneyModeEnum[keyof typeof Verb12AffectedJourneyModeEnum];
/**
 * @export
 */
export const Verb12AffectedJourneyStopModeEnum = {
    All: 'ALL',
    Imp: 'IMP',
    Off: 'OFF'
} as const;
export type Verb12AffectedJourneyStopModeEnum = typeof Verb12AffectedJourneyStopModeEnum[keyof typeof Verb12AffectedJourneyStopModeEnum];
