/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JourneyDetail,
} from '../models/index';
import {
    JourneyDetailFromJSON,
    JourneyDetailToJSON,
} from '../models/index';

export interface Verb7Request {
    id: string;
    requestId?: string;
    format?: Verb7FormatEnum;
    jsonpCallback?: string;
    lang?: string;
    date?: string;
    poly?: Verb7PolyEnum;
    polyEnc?: Verb7PolyEncEnum;
    showPassingPoints?: Verb7ShowPassingPointsEnum;
    rtMode?: Verb7RtModeEnum;
    fromId?: string;
    fromIdx?: number;
    toId?: string;
    toIdx?: number;
    baim?: Verb7BaimEnum;
}

/**
 * 
 */
export class JourneyDetailApi extends runtime.BaseAPI {

    /**
     * Journey Detail
     */
    async verb7Raw(requestParameters: Verb7Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JourneyDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling verb7.');
        }

        const queryParameters: any = {};

        if (requestParameters.requestId !== undefined) {
            queryParameters['requestId'] = requestParameters.requestId;
        }

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.jsonpCallback !== undefined) {
            queryParameters['jsonpCallback'] = requestParameters.jsonpCallback;
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        if (requestParameters.poly !== undefined) {
            queryParameters['poly'] = requestParameters.poly;
        }

        if (requestParameters.polyEnc !== undefined) {
            queryParameters['polyEnc'] = requestParameters.polyEnc;
        }

        if (requestParameters.showPassingPoints !== undefined) {
            queryParameters['showPassingPoints'] = requestParameters.showPassingPoints;
        }

        if (requestParameters.rtMode !== undefined) {
            queryParameters['rtMode'] = requestParameters.rtMode;
        }

        if (requestParameters.fromId !== undefined) {
            queryParameters['fromId'] = requestParameters.fromId;
        }

        if (requestParameters.fromIdx !== undefined) {
            queryParameters['fromIdx'] = requestParameters.fromIdx;
        }

        if (requestParameters.toId !== undefined) {
            queryParameters['toId'] = requestParameters.toId;
        }

        if (requestParameters.toIdx !== undefined) {
            queryParameters['toIdx'] = requestParameters.toIdx;
        }

        if (requestParameters.baim !== undefined) {
            queryParameters['baim'] = requestParameters.baim;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            queryParameters["accessId"] = this.configuration.apiKey("accessId"); // accessId authentication
        }

        const response = await this.request({
            path: `/journeyDetail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JourneyDetailFromJSON(jsonValue));
    }

    /**
     * Journey Detail
     */
    async verb7(requestParameters: Verb7Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JourneyDetail> {
        const response = await this.verb7Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Verb7FormatEnum = {
    Xml: 'xml',
    Json: 'json',
    Jsonp: 'jsonp'
} as const;
export type Verb7FormatEnum = typeof Verb7FormatEnum[keyof typeof Verb7FormatEnum];
/**
 * @export
 */
export const Verb7PolyEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb7PolyEnum = typeof Verb7PolyEnum[keyof typeof Verb7PolyEnum];
/**
 * @export
 */
export const Verb7PolyEncEnum = {
    Dlt: 'DLT',
    Gpa: 'GPA',
    N: 'N'
} as const;
export type Verb7PolyEncEnum = typeof Verb7PolyEncEnum[keyof typeof Verb7PolyEncEnum];
/**
 * @export
 */
export const Verb7ShowPassingPointsEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb7ShowPassingPointsEnum = typeof Verb7ShowPassingPointsEnum[keyof typeof Verb7ShowPassingPointsEnum];
/**
 * @export
 */
export const Verb7RtModeEnum = {
    Full: 'FULL',
    Infos: 'INFOS',
    Off: 'OFF',
    Realtime: 'REALTIME',
    ServerDefault: 'SERVER_DEFAULT'
} as const;
export type Verb7RtModeEnum = typeof Verb7RtModeEnum[keyof typeof Verb7RtModeEnum];
/**
 * @export
 */
export const Verb7BaimEnum = {
    _0: '0',
    _1: '1'
} as const;
export type Verb7BaimEnum = typeof Verb7BaimEnum[keyof typeof Verb7BaimEnum];
