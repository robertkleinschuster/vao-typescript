/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RGBAColorType } from './RGBAColorType';
import {
    RGBAColorTypeFromJSON,
    RGBAColorTypeFromJSONTyped,
    RGBAColorTypeToJSON,
} from './RGBAColorType';

/**
 * 
 * @export
 * @interface IconType
 */
export interface IconType {
    /**
     * 
     * @type {RGBAColorType}
     * @memberof IconType
     */
    foregroundColor?: RGBAColorType;
    /**
     * 
     * @type {RGBAColorType}
     * @memberof IconType
     */
    backgroundColor?: RGBAColorType;
    /**
     * 
     * @type {RGBAColorType}
     * @memberof IconType
     */
    borderColor?: RGBAColorType;
    /**
     * 
     * @type {string}
     * @memberof IconType
     */
    res?: string;
    /**
     * 
     * @type {string}
     * @memberof IconType
     */
    txt?: string;
    /**
     * 
     * @type {string}
     * @memberof IconType
     */
    txtS?: string;
    /**
     * 
     * @type {string}
     * @memberof IconType
     */
    style?: IconTypeStyleEnum;
    /**
     * 
     * @type {string}
     * @memberof IconType
     */
    shape?: IconTypeShapeEnum;
    /**
     * 
     * @type {string}
     * @memberof IconType
     */
    shapeRes?: string;
}


/**
 * @export
 */
export const IconTypeStyleEnum = {
    U: 'U',
    N: 'N',
    B: 'B',
    I: 'I',
    Bi: 'BI'
} as const;
export type IconTypeStyleEnum = typeof IconTypeStyleEnum[keyof typeof IconTypeStyleEnum];

/**
 * @export
 */
export const IconTypeShapeEnum = {
    U: 'U',
    R: 'R',
    C: 'C',
    Res: 'RES'
} as const;
export type IconTypeShapeEnum = typeof IconTypeShapeEnum[keyof typeof IconTypeShapeEnum];


/**
 * Check if a given object implements the IconType interface.
 */
export function instanceOfIconType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function IconTypeFromJSON(json: any): IconType {
    return IconTypeFromJSONTyped(json, false);
}

export function IconTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): IconType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'foregroundColor': !exists(json, 'foregroundColor') ? undefined : RGBAColorTypeFromJSON(json['foregroundColor']),
        'backgroundColor': !exists(json, 'backgroundColor') ? undefined : RGBAColorTypeFromJSON(json['backgroundColor']),
        'borderColor': !exists(json, 'borderColor') ? undefined : RGBAColorTypeFromJSON(json['borderColor']),
        'res': !exists(json, 'res') ? undefined : json['res'],
        'txt': !exists(json, 'txt') ? undefined : json['txt'],
        'txtS': !exists(json, 'txtS') ? undefined : json['txtS'],
        'style': !exists(json, 'style') ? undefined : json['style'],
        'shape': !exists(json, 'shape') ? undefined : json['shape'],
        'shapeRes': !exists(json, 'shapeRes') ? undefined : json['shapeRes'],
    };
}

export function IconTypeToJSON(value?: IconType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'foregroundColor': RGBAColorTypeToJSON(value.foregroundColor),
        'backgroundColor': RGBAColorTypeToJSON(value.backgroundColor),
        'borderColor': RGBAColorTypeToJSON(value.borderColor),
        'res': value.res,
        'txt': value.txt,
        'txtS': value.txtS,
        'style': value.style,
        'shape': value.shape,
        'shapeRes': value.shapeRes,
    };
}

