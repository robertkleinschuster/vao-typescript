/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IconType } from './IconType';
import {
    IconTypeFromJSON,
    IconTypeFromJSONTyped,
    IconTypeToJSON,
} from './IconType';
import type { LocationNotes } from './LocationNotes';
import {
    LocationNotesFromJSON,
    LocationNotesFromJSONTyped,
    LocationNotesToJSON,
} from './LocationNotes';
import type { ResourceLinks } from './ResourceLinks';
import {
    ResourceLinksFromJSON,
    ResourceLinksFromJSONTyped,
    ResourceLinksToJSON,
} from './ResourceLinks';
import type { WeatherInformationType } from './WeatherInformationType';
import {
    WeatherInformationTypeFromJSON,
    WeatherInformationTypeFromJSONTyped,
    WeatherInformationTypeToJSON,
} from './WeatherInformationType';

/**
 * 
 * @export
 * @interface CoordLocation
 */
export interface CoordLocation {
    /**
     * 
     * @type {LocationNotes}
     * @memberof CoordLocation
     */
    locationNotes?: LocationNotes;
    /**
     * 
     * @type {Array<ResourceLinks>}
     * @memberof CoordLocation
     */
    links?: Array<ResourceLinks>;
    /**
     * 
     * @type {IconType}
     * @memberof CoordLocation
     */
    icon?: IconType;
    /**
     * 
     * @type {Array<CoordLocation>}
     * @memberof CoordLocation
     */
    childLocation?: Array<CoordLocation>;
    /**
     * 
     * @type {Array<WeatherInformationType>}
     * @memberof CoordLocation
     */
    weatherInformation?: Array<WeatherInformationType>;
    /**
     * 
     * @type {string}
     * @memberof CoordLocation
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CoordLocation
     */
    extId?: string;
    /**
     * 
     * @type {string}
     * @memberof CoordLocation
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CoordLocation
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CoordLocation
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof CoordLocation
     */
    lon?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordLocation
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordLocation
     */
    alt?: number;
    /**
     * 
     * @type {number}
     * @memberof CoordLocation
     */
    dist?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CoordLocation
     */
    refinable?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CoordLocation
     */
    matchValue?: number;
}

/**
 * Check if a given object implements the CoordLocation interface.
 */
export function instanceOfCoordLocation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function CoordLocationFromJSON(json: any): CoordLocation {
    return CoordLocationFromJSONTyped(json, false);
}

export function CoordLocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): CoordLocation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locationNotes': !exists(json, 'LocationNotes') ? undefined : LocationNotesFromJSON(json['LocationNotes']),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(ResourceLinksFromJSON)),
        'icon': !exists(json, 'icon') ? undefined : IconTypeFromJSON(json['icon']),
        'childLocation': !exists(json, 'childLocation') ? undefined : ((json['childLocation'] as Array<any>).map(CoordLocationFromJSON)),
        'weatherInformation': !exists(json, 'weatherInformation') ? undefined : ((json['weatherInformation'] as Array<any>).map(WeatherInformationTypeFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'extId': !exists(json, 'extId') ? undefined : json['extId'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': json['type'],
        'lon': !exists(json, 'lon') ? undefined : json['lon'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'alt': !exists(json, 'alt') ? undefined : json['alt'],
        'dist': !exists(json, 'dist') ? undefined : json['dist'],
        'refinable': !exists(json, 'refinable') ? undefined : json['refinable'],
        'matchValue': !exists(json, 'matchValue') ? undefined : json['matchValue'],
    };
}

export function CoordLocationToJSON(value?: CoordLocation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'LocationNotes': LocationNotesToJSON(value.locationNotes),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(ResourceLinksToJSON)),
        'icon': IconTypeToJSON(value.icon),
        'childLocation': value.childLocation === undefined ? undefined : ((value.childLocation as Array<any>).map(CoordLocationToJSON)),
        'weatherInformation': value.weatherInformation === undefined ? undefined : ((value.weatherInformation as Array<any>).map(WeatherInformationTypeToJSON)),
        'id': value.id,
        'extId': value.extId,
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'lon': value.lon,
        'lat': value.lat,
        'alt': value.alt,
        'dist': value.dist,
        'refinable': value.refinable,
        'matchValue': value.matchValue,
    };
}

