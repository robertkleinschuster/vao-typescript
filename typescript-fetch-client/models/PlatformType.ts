/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PlatformType
 */
export interface PlatformType {
    /**
     * 
     * @type {Array<string>}
     * @memberof PlatformType
     */
    altId?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PlatformType
     */
    type?: PlatformTypeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof PlatformType
     */
    text?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlatformType
     */
    hidden?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PlatformType
     */
    lon?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformType
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof PlatformType
     */
    alt?: number;
}


/**
 * @export
 */
export const PlatformTypeTypeEnum = {
    U: 'U',
    Pl: 'PL',
    St: 'ST',
    Ga: 'GA',
    Pi: 'PI',
    Sl: 'SL',
    Fl: 'FL',
    Ci: 'CI',
    Co: 'CO',
    X: 'X',
    H: 'H'
} as const;
export type PlatformTypeTypeEnum = typeof PlatformTypeTypeEnum[keyof typeof PlatformTypeTypeEnum];


/**
 * Check if a given object implements the PlatformType interface.
 */
export function instanceOfPlatformType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PlatformTypeFromJSON(json: any): PlatformType {
    return PlatformTypeFromJSONTyped(json, false);
}

export function PlatformTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlatformType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'altId': !exists(json, 'altId') ? undefined : json['altId'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'hidden': !exists(json, 'hidden') ? undefined : json['hidden'],
        'lon': !exists(json, 'lon') ? undefined : json['lon'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'alt': !exists(json, 'alt') ? undefined : json['alt'],
    };
}

export function PlatformTypeToJSON(value?: PlatformType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'altId': value.altId,
        'type': value.type,
        'text': value.text,
        'hidden': value.hidden,
        'lon': value.lon,
        'lat': value.lat,
        'alt': value.alt,
    };
}

