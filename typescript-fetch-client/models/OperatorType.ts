/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OperatorType
 */
export interface OperatorType {
    /**
     * 
     * @type {Array<string>}
     * @memberof OperatorType
     */
    administration?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OperatorType
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorType
     */
    nameS?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorType
     */
    nameN?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorType
     */
    nameL?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorType
     */
    addName?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorType
     */
    id?: string;
}

/**
 * Check if a given object implements the OperatorType interface.
 */
export function instanceOfOperatorType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function OperatorTypeFromJSON(json: any): OperatorType {
    return OperatorTypeFromJSONTyped(json, false);
}

export function OperatorTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OperatorType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'administration': !exists(json, 'administration') ? undefined : json['administration'],
        'name': json['name'],
        'nameS': !exists(json, 'nameS') ? undefined : json['nameS'],
        'nameN': !exists(json, 'nameN') ? undefined : json['nameN'],
        'nameL': !exists(json, 'nameL') ? undefined : json['nameL'],
        'addName': !exists(json, 'addName') ? undefined : json['addName'],
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function OperatorTypeToJSON(value?: OperatorType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'administration': value.administration,
        'name': value.name,
        'nameS': value.nameS,
        'nameN': value.nameN,
        'nameL': value.nameL,
        'addName': value.addName,
        'id': value.id,
    };
}

