/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { KVType } from './KVType';
import {
    KVTypeFromJSON,
    KVTypeFromJSONTyped,
    KVTypeToJSON,
} from './KVType';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { Notes } from './Notes';
import {
    NotesFromJSON,
    NotesFromJSONTyped,
    NotesToJSON,
} from './Notes';
import type { OccupancyType } from './OccupancyType';
import {
    OccupancyTypeFromJSON,
    OccupancyTypeFromJSONTyped,
    OccupancyTypeToJSON,
} from './OccupancyType';
import type { PlatformType } from './PlatformType';
import {
    PlatformTypeFromJSON,
    PlatformTypeFromJSONTyped,
    PlatformTypeToJSON,
} from './PlatformType';
import type { StopLocation } from './StopLocation';
import {
    StopLocationFromJSON,
    StopLocationFromJSONTyped,
    StopLocationToJSON,
} from './StopLocation';
import type { WeatherInformationType } from './WeatherInformationType';
import {
    WeatherInformationTypeFromJSON,
    WeatherInformationTypeFromJSONTyped,
    WeatherInformationTypeToJSON,
} from './WeatherInformationType';

/**
 * 
 * @export
 * @interface OriginDestType
 */
export interface OriginDestType {
    /**
     * 
     * @type {Notes}
     * @memberof OriginDestType
     */
    notes?: Notes;
    /**
     * 
     * @type {Array<KVType>}
     * @memberof OriginDestType
     */
    readonly mcpData?: Array<KVType>;
    /**
     * 
     * @type {Array<Message>}
     * @memberof OriginDestType
     */
    readonly message?: Array<Message>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OriginDestType
     */
    readonly altId?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OriginDestType
     */
    readonly mainMastAltId?: Array<string>;
    /**
     * 
     * @type {Array<OccupancyType>}
     * @memberof OriginDestType
     */
    readonly occupancy?: Array<OccupancyType>;
    /**
     * 
     * @type {PlatformType}
     * @memberof OriginDestType
     */
    platform?: PlatformType;
    /**
     * 
     * @type {PlatformType}
     * @memberof OriginDestType
     */
    rtPlatform?: PlatformType;
    /**
     * 
     * @type {Array<WeatherInformationType>}
     * @memberof OriginDestType
     */
    readonly weatherInformation?: Array<WeatherInformationType>;
    /**
     * 
     * @type {StopLocation}
     * @memberof OriginDestType
     */
    mainMast?: StopLocation;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    extId?: string;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    lon?: number;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    alt?: number;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    routeIdx?: number;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    prognosisType?: OriginDestTypePrognosisTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    time: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    date: string;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    tz?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    scheduledTimeChanged?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    track?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    trackHidden?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    rtTime?: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    rtDate?: string;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    rtTz?: number;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    rtTrack?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    rtTrackHidden?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    isMainMast?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    hasMainMast?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    mainMastId?: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    mainMastExtId?: string;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    mainMastLon?: number;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    mainMastLat?: number;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    mainMastAlt?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    alighting?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    boarding?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    rtAlighting?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    rtBoarding?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    cancelled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    cancelledDeparture?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    cancelledArrival?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    uncertainDelay?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    additional?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    isBorderStop?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    isTurningPoint?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    hide?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    entry?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OriginDestType
     */
    mcp?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OriginDestType
     */
    trainCompositionMarker?: number;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    rtCnclDataSourceType?: OriginDestTypeRtCnclDataSourceTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    psCtxArriveEarlier?: string;
    /**
     * 
     * @type {string}
     * @memberof OriginDestType
     */
    psCtxDepartLater?: string;
}


/**
 * @export
 */
export const OriginDestTypePrognosisTypeEnum = {
    Prognosed: 'PROGNOSED',
    Manual: 'MANUAL',
    Reported: 'REPORTED',
    Corrected: 'CORRECTED',
    Calculated: 'CALCULATED'
} as const;
export type OriginDestTypePrognosisTypeEnum = typeof OriginDestTypePrognosisTypeEnum[keyof typeof OriginDestTypePrognosisTypeEnum];

/**
 * @export
 */
export const OriginDestTypeRtCnclDataSourceTypeEnum = {
    Default: 'DEFAULT',
    Vdv: 'VDV',
    Him: 'HIM',
    Hrc: 'HRC',
    Siri: 'SIRI',
    Uic: 'UIC',
    Hrx: 'HRX',
    Gtfs: 'GTFS',
    Fis: 'FIS',
    Dds: 'DDS',
    Paisa: 'PAISA',
    Fe: 'FE',
    Blacklist: 'BLACKLIST',
    Aramis: 'ARAMIS',
    Rtabo2: 'RTABO2'
} as const;
export type OriginDestTypeRtCnclDataSourceTypeEnum = typeof OriginDestTypeRtCnclDataSourceTypeEnum[keyof typeof OriginDestTypeRtCnclDataSourceTypeEnum];


/**
 * Check if a given object implements the OriginDestType interface.
 */
export function instanceOfOriginDestType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "time" in value;
    isInstance = isInstance && "date" in value;

    return isInstance;
}

export function OriginDestTypeFromJSON(json: any): OriginDestType {
    return OriginDestTypeFromJSONTyped(json, false);
}

export function OriginDestTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OriginDestType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'notes': !exists(json, 'Notes') ? undefined : NotesFromJSON(json['Notes']),
        'mcpData': !exists(json, 'mcpData') ? undefined : ((json['mcpData'] as Array<any>).map(KVTypeFromJSON)),
        'message': !exists(json, 'Message') ? undefined : ((json['Message'] as Array<any>).map(MessageFromJSON)),
        'altId': !exists(json, 'altId') ? undefined : json['altId'],
        'mainMastAltId': !exists(json, 'mainMastAltId') ? undefined : json['mainMastAltId'],
        'occupancy': !exists(json, 'Occupancy') ? undefined : ((json['Occupancy'] as Array<any>).map(OccupancyTypeFromJSON)),
        'platform': !exists(json, 'platform') ? undefined : PlatformTypeFromJSON(json['platform']),
        'rtPlatform': !exists(json, 'rtPlatform') ? undefined : PlatformTypeFromJSON(json['rtPlatform']),
        'weatherInformation': !exists(json, 'weatherInformation') ? undefined : ((json['weatherInformation'] as Array<any>).map(WeatherInformationTypeFromJSON)),
        'mainMast': !exists(json, 'mainMast') ? undefined : StopLocationFromJSON(json['mainMast']),
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'type': json['type'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'extId': !exists(json, 'extId') ? undefined : json['extId'],
        'lon': !exists(json, 'lon') ? undefined : json['lon'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'alt': !exists(json, 'alt') ? undefined : json['alt'],
        'routeIdx': !exists(json, 'routeIdx') ? undefined : json['routeIdx'],
        'prognosisType': !exists(json, 'prognosisType') ? undefined : json['prognosisType'],
        'time': json['time'],
        'date': json['date'],
        'tz': !exists(json, 'tz') ? undefined : json['tz'],
        'scheduledTimeChanged': !exists(json, 'scheduledTimeChanged') ? undefined : json['scheduledTimeChanged'],
        'track': !exists(json, 'track') ? undefined : json['track'],
        'trackHidden': !exists(json, 'trackHidden') ? undefined : json['trackHidden'],
        'rtTime': !exists(json, 'rtTime') ? undefined : json['rtTime'],
        'rtDate': !exists(json, 'rtDate') ? undefined : json['rtDate'],
        'rtTz': !exists(json, 'rtTz') ? undefined : json['rtTz'],
        'rtTrack': !exists(json, 'rtTrack') ? undefined : json['rtTrack'],
        'rtTrackHidden': !exists(json, 'rtTrackHidden') ? undefined : json['rtTrackHidden'],
        'isMainMast': !exists(json, 'isMainMast') ? undefined : json['isMainMast'],
        'hasMainMast': !exists(json, 'hasMainMast') ? undefined : json['hasMainMast'],
        'mainMastId': !exists(json, 'mainMastId') ? undefined : json['mainMastId'],
        'mainMastExtId': !exists(json, 'mainMastExtId') ? undefined : json['mainMastExtId'],
        'mainMastLon': !exists(json, 'mainMastLon') ? undefined : json['mainMastLon'],
        'mainMastLat': !exists(json, 'mainMastLat') ? undefined : json['mainMastLat'],
        'mainMastAlt': !exists(json, 'mainMastAlt') ? undefined : json['mainMastAlt'],
        'alighting': !exists(json, 'alighting') ? undefined : json['alighting'],
        'boarding': !exists(json, 'boarding') ? undefined : json['boarding'],
        'rtAlighting': !exists(json, 'rtAlighting') ? undefined : json['rtAlighting'],
        'rtBoarding': !exists(json, 'rtBoarding') ? undefined : json['rtBoarding'],
        'cancelled': !exists(json, 'cancelled') ? undefined : json['cancelled'],
        'cancelledDeparture': !exists(json, 'cancelledDeparture') ? undefined : json['cancelledDeparture'],
        'cancelledArrival': !exists(json, 'cancelledArrival') ? undefined : json['cancelledArrival'],
        'uncertainDelay': !exists(json, 'uncertainDelay') ? undefined : json['uncertainDelay'],
        'additional': !exists(json, 'additional') ? undefined : json['additional'],
        'isBorderStop': !exists(json, 'isBorderStop') ? undefined : json['isBorderStop'],
        'isTurningPoint': !exists(json, 'isTurningPoint') ? undefined : json['isTurningPoint'],
        'hide': !exists(json, 'hide') ? undefined : json['hide'],
        'entry': !exists(json, 'entry') ? undefined : json['entry'],
        'mcp': !exists(json, 'mcp') ? undefined : json['mcp'],
        'trainCompositionMarker': !exists(json, 'trainCompositionMarker') ? undefined : json['trainCompositionMarker'],
        'rtCnclDataSourceType': !exists(json, 'rtCnclDataSourceType') ? undefined : json['rtCnclDataSourceType'],
        'psCtxArriveEarlier': !exists(json, 'psCtxArriveEarlier') ? undefined : json['psCtxArriveEarlier'],
        'psCtxDepartLater': !exists(json, 'psCtxDepartLater') ? undefined : json['psCtxDepartLater'],
    };
}

export function OriginDestTypeToJSON(value?: OriginDestType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Notes': NotesToJSON(value.notes),
        'platform': PlatformTypeToJSON(value.platform),
        'rtPlatform': PlatformTypeToJSON(value.rtPlatform),
        'mainMast': StopLocationToJSON(value.mainMast),
        'name': value.name,
        'description': value.description,
        'type': value.type,
        'id': value.id,
        'extId': value.extId,
        'lon': value.lon,
        'lat': value.lat,
        'alt': value.alt,
        'routeIdx': value.routeIdx,
        'prognosisType': value.prognosisType,
        'time': value.time,
        'date': value.date,
        'tz': value.tz,
        'scheduledTimeChanged': value.scheduledTimeChanged,
        'track': value.track,
        'trackHidden': value.trackHidden,
        'rtTime': value.rtTime,
        'rtDate': value.rtDate,
        'rtTz': value.rtTz,
        'rtTrack': value.rtTrack,
        'rtTrackHidden': value.rtTrackHidden,
        'isMainMast': value.isMainMast,
        'hasMainMast': value.hasMainMast,
        'mainMastId': value.mainMastId,
        'mainMastExtId': value.mainMastExtId,
        'mainMastLon': value.mainMastLon,
        'mainMastLat': value.mainMastLat,
        'mainMastAlt': value.mainMastAlt,
        'alighting': value.alighting,
        'boarding': value.boarding,
        'rtAlighting': value.rtAlighting,
        'rtBoarding': value.rtBoarding,
        'cancelled': value.cancelled,
        'cancelledDeparture': value.cancelledDeparture,
        'cancelledArrival': value.cancelledArrival,
        'uncertainDelay': value.uncertainDelay,
        'additional': value.additional,
        'isBorderStop': value.isBorderStop,
        'isTurningPoint': value.isTurningPoint,
        'hide': value.hide,
        'entry': value.entry,
        'mcp': value.mcp,
        'trainCompositionMarker': value.trainCompositionMarker,
        'rtCnclDataSourceType': value.rtCnclDataSourceType,
        'psCtxArriveEarlier': value.psCtxArriveEarlier,
        'psCtxDepartLater': value.psCtxDepartLater,
    };
}

