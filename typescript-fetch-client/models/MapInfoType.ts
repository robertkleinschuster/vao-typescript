/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MapLayerType } from './MapLayerType';
import {
    MapLayerTypeFromJSON,
    MapLayerTypeFromJSONTyped,
    MapLayerTypeToJSON,
} from './MapLayerType';

/**
 * 
 * @export
 * @interface MapInfoType
 */
export interface MapInfoType {
    /**
     * 
     * @type {Array<MapLayerType>}
     * @memberof MapInfoType
     */
    baseMap?: Array<MapLayerType>;
    /**
     * 
     * @type {Array<MapLayerType>}
     * @memberof MapInfoType
     */
    overlayMap?: Array<MapLayerType>;
}

/**
 * Check if a given object implements the MapInfoType interface.
 */
export function instanceOfMapInfoType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MapInfoTypeFromJSON(json: any): MapInfoType {
    return MapInfoTypeFromJSONTyped(json, false);
}

export function MapInfoTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MapInfoType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'baseMap': !exists(json, 'BaseMap') ? undefined : ((json['BaseMap'] as Array<any>).map(MapLayerTypeFromJSON)),
        'overlayMap': !exists(json, 'OverlayMap') ? undefined : ((json['OverlayMap'] as Array<any>).map(MapLayerTypeFromJSON)),
    };
}

export function MapInfoTypeToJSON(value?: MapInfoType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'BaseMap': value.baseMap === undefined ? undefined : ((value.baseMap as Array<any>).map(MapLayerTypeToJSON)),
        'OverlayMap': value.overlayMap === undefined ? undefined : ((value.overlayMap as Array<any>).map(MapLayerTypeToJSON)),
    };
}

