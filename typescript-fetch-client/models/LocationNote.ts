/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LocationNote
 */
export interface LocationNote {
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    type?: LocationNoteTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    txtN?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    txtL?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    txtS?: string;
    /**
     * 
     * @type {string}
     * @memberof LocationNote
     */
    url?: string;
}


/**
 * @export
 */
export const LocationNoteTypeEnum = {
    U: 'U',
    A: 'A',
    I: 'I',
    R: 'R',
    H: 'H',
    M: 'M',
    C: 'C',
    D: 'D',
    B: 'B',
    Q: 'Q',
    L: 'L',
    N: 'N',
    O: 'O',
    P: 'P',
    S: 'S',
    V: 'V',
    X: 'X',
    Z: 'Z',
    Y: 'Y',
    K: 'K',
    G: 'G',
    W: 'W',
    Ed: 'ED',
    Tar: 'TAR',
    Fn: 'FN',
    Tln: 'TLN',
    Lnc: 'LNC'
} as const;
export type LocationNoteTypeEnum = typeof LocationNoteTypeEnum[keyof typeof LocationNoteTypeEnum];


/**
 * Check if a given object implements the LocationNote interface.
 */
export function instanceOfLocationNote(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function LocationNoteFromJSON(json: any): LocationNote {
    return LocationNoteFromJSONTyped(json, false);
}

export function LocationNoteFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationNote {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'value': !exists(json, 'value') ? undefined : json['value'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'txtN': !exists(json, 'txtN') ? undefined : json['txtN'],
        'txtL': !exists(json, 'txtL') ? undefined : json['txtL'],
        'txtS': !exists(json, 'txtS') ? undefined : json['txtS'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function LocationNoteToJSON(value?: LocationNote | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'value': value.value,
        'key': value.key,
        'type': value.type,
        'txtN': value.txtN,
        'txtL': value.txtL,
        'txtS': value.txtS,
        'url': value.url,
    };
}

