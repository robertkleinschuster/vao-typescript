/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IconType } from './IconType';
import {
    IconTypeFromJSON,
    IconTypeFromJSONTyped,
    IconTypeToJSON,
} from './IconType';

/**
 * 
 * @export
 * @interface ExternalContentType
 */
export interface ExternalContentType {
    /**
     * 
     * @type {object}
     * @memberof ExternalContentType
     */
    content?: object;
    /**
     * 
     * @type {IconType}
     * @memberof ExternalContentType
     */
    icon?: IconType;
    /**
     * 
     * @type {string}
     * @memberof ExternalContentType
     */
    provider?: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalContentType
     */
    providerName?: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalContentType
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof ExternalContentType
     */
    contentType?: string;
}

/**
 * Check if a given object implements the ExternalContentType interface.
 */
export function instanceOfExternalContentType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ExternalContentTypeFromJSON(json: any): ExternalContentType {
    return ExternalContentTypeFromJSONTyped(json, false);
}

export function ExternalContentTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalContentType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'content': !exists(json, 'content') ? undefined : json['content'],
        'icon': !exists(json, 'icon') ? undefined : IconTypeFromJSON(json['icon']),
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
        'providerName': !exists(json, 'providerName') ? undefined : json['providerName'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'contentType': !exists(json, 'contentType') ? undefined : json['contentType'],
    };
}

export function ExternalContentTypeToJSON(value?: ExternalContentType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'content': value.content,
        'icon': IconTypeToJSON(value.icon),
        'provider': value.provider,
        'providerName': value.providerName,
        'text': value.text,
        'contentType': value.contentType,
    };
}

