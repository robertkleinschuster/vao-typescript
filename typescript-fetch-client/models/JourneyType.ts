/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JourneyDetailRef } from './JourneyDetailRef';
import {
    JourneyDetailRefFromJSON,
    JourneyDetailRefFromJSONTyped,
    JourneyDetailRefToJSON,
} from './JourneyDetailRef';
import type { JourneyPathType } from './JourneyPathType';
import {
    JourneyPathTypeFromJSON,
    JourneyPathTypeFromJSONTyped,
    JourneyPathTypeToJSON,
} from './JourneyPathType';
import type { Messages } from './Messages';
import {
    MessagesFromJSON,
    MessagesFromJSONTyped,
    MessagesToJSON,
} from './Messages';
import type { Notes } from './Notes';
import {
    NotesFromJSON,
    NotesFromJSONTyped,
    NotesToJSON,
} from './Notes';
import type { OccupancyType } from './OccupancyType';
import {
    OccupancyTypeFromJSON,
    OccupancyTypeFromJSONTyped,
    OccupancyTypeToJSON,
} from './OccupancyType';
import type { OriginDestType } from './OriginDestType';
import {
    OriginDestTypeFromJSON,
    OriginDestTypeFromJSONTyped,
    OriginDestTypeToJSON,
} from './OriginDestType';
import type { ProductType } from './ProductType';
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
} from './ProductType';
import type { ReferencedJourneyType } from './ReferencedJourneyType';
import {
    ReferencedJourneyTypeFromJSON,
    ReferencedJourneyTypeFromJSONTyped,
    ReferencedJourneyTypeToJSON,
} from './ReferencedJourneyType';
import type { Stops } from './Stops';
import {
    StopsFromJSON,
    StopsFromJSONTyped,
    StopsToJSON,
} from './Stops';

/**
 * 
 * @export
 * @interface JourneyType
 */
export interface JourneyType {
    /**
     * 
     * @type {OriginDestType}
     * @memberof JourneyType
     */
    journeyOrigin?: OriginDestType;
    /**
     * 
     * @type {OriginDestType}
     * @memberof JourneyType
     */
    journeyDestination?: OriginDestType;
    /**
     * 
     * @type {Stops}
     * @memberof JourneyType
     */
    stops?: Stops;
    /**
     * 
     * @type {JourneyDetailRef}
     * @memberof JourneyType
     */
    journeyDetailRef?: JourneyDetailRef;
    /**
     * 
     * @type {ProductType}
     * @memberof JourneyType
     */
    product?: ProductType;
    /**
     * 
     * @type {Notes}
     * @memberof JourneyType
     */
    notes?: Notes;
    /**
     * 
     * @type {Messages}
     * @memberof JourneyType
     */
    messages?: Messages;
    /**
     * 
     * @type {Array<OccupancyType>}
     * @memberof JourneyType
     */
    occupancy?: Array<OccupancyType>;
    /**
     * 
     * @type {Array<ReferencedJourneyType>}
     * @memberof JourneyType
     */
    referencedJourney?: Array<ReferencedJourneyType>;
    /**
     * 
     * @type {JourneyPathType}
     * @memberof JourneyType
     */
    journeyPath?: JourneyPathType;
    /**
     * 
     * @type {string}
     * @memberof JourneyType
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof JourneyType
     */
    addName?: string;
    /**
     * 
     * @type {string}
     * @memberof JourneyType
     */
    direction?: string;
    /**
     * 
     * @type {number}
     * @memberof JourneyType
     */
    lon?: number;
    /**
     * 
     * @type {number}
     * @memberof JourneyType
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof JourneyType
     */
    alt?: number;
    /**
     * 
     * @type {string}
     * @memberof JourneyType
     */
    trainNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof JourneyType
     */
    trainCategory?: string;
}

/**
 * Check if a given object implements the JourneyType interface.
 */
export function instanceOfJourneyType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function JourneyTypeFromJSON(json: any): JourneyType {
    return JourneyTypeFromJSONTyped(json, false);
}

export function JourneyTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): JourneyType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'journeyOrigin': !exists(json, 'JourneyOrigin') ? undefined : OriginDestTypeFromJSON(json['JourneyOrigin']),
        'journeyDestination': !exists(json, 'JourneyDestination') ? undefined : OriginDestTypeFromJSON(json['JourneyDestination']),
        'stops': !exists(json, 'Stops') ? undefined : StopsFromJSON(json['Stops']),
        'journeyDetailRef': !exists(json, 'JourneyDetailRef') ? undefined : JourneyDetailRefFromJSON(json['JourneyDetailRef']),
        'product': !exists(json, 'Product') ? undefined : ProductTypeFromJSON(json['Product']),
        'notes': !exists(json, 'Notes') ? undefined : NotesFromJSON(json['Notes']),
        'messages': !exists(json, 'Messages') ? undefined : MessagesFromJSON(json['Messages']),
        'occupancy': !exists(json, 'Occupancy') ? undefined : ((json['Occupancy'] as Array<any>).map(OccupancyTypeFromJSON)),
        'referencedJourney': !exists(json, 'referencedJourney') ? undefined : ((json['referencedJourney'] as Array<any>).map(ReferencedJourneyTypeFromJSON)),
        'journeyPath': !exists(json, 'JourneyPath') ? undefined : JourneyPathTypeFromJSON(json['JourneyPath']),
        'name': json['name'],
        'addName': !exists(json, 'addName') ? undefined : json['addName'],
        'direction': !exists(json, 'direction') ? undefined : json['direction'],
        'lon': !exists(json, 'lon') ? undefined : json['lon'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'alt': !exists(json, 'alt') ? undefined : json['alt'],
        'trainNumber': !exists(json, 'trainNumber') ? undefined : json['trainNumber'],
        'trainCategory': !exists(json, 'trainCategory') ? undefined : json['trainCategory'],
    };
}

export function JourneyTypeToJSON(value?: JourneyType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'JourneyOrigin': OriginDestTypeToJSON(value.journeyOrigin),
        'JourneyDestination': OriginDestTypeToJSON(value.journeyDestination),
        'Stops': StopsToJSON(value.stops),
        'JourneyDetailRef': JourneyDetailRefToJSON(value.journeyDetailRef),
        'Product': ProductTypeToJSON(value.product),
        'Notes': NotesToJSON(value.notes),
        'Messages': MessagesToJSON(value.messages),
        'Occupancy': value.occupancy === undefined ? undefined : ((value.occupancy as Array<any>).map(OccupancyTypeToJSON)),
        'referencedJourney': value.referencedJourney === undefined ? undefined : ((value.referencedJourney as Array<any>).map(ReferencedJourneyTypeToJSON)),
        'JourneyPath': JourneyPathTypeToJSON(value.journeyPath),
        'name': value.name,
        'addName': value.addName,
        'direction': value.direction,
        'lon': value.lon,
        'lat': value.lat,
        'alt': value.alt,
        'trainNumber': value.trainNumber,
        'trainCategory': value.trainCategory,
    };
}

