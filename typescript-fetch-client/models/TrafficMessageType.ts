/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IconType } from './IconType';
import {
    IconTypeFromJSON,
    IconTypeFromJSONTyped,
    IconTypeToJSON,
} from './IconType';
import type { PolylineGroup } from './PolylineGroup';
import {
    PolylineGroupFromJSON,
    PolylineGroupFromJSONTyped,
    PolylineGroupToJSON,
} from './PolylineGroup';
import type { StopLocation } from './StopLocation';
import {
    StopLocationFromJSON,
    StopLocationFromJSONTyped,
    StopLocationToJSON,
} from './StopLocation';

/**
 * 
 * @export
 * @interface TrafficMessageType
 */
export interface TrafficMessageType {
    /**
     * 
     * @type {IconType}
     * @memberof TrafficMessageType
     */
    icon?: IconType;
    /**
     * 
     * @type {StopLocation}
     * @memberof TrafficMessageType
     */
    location?: StopLocation;
    /**
     * 
     * @type {PolylineGroup}
     * @memberof TrafficMessageType
     */
    polylineGroup?: PolylineGroup;
    /**
     * 
     * @type {string}
     * @memberof TrafficMessageType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof TrafficMessageType
     */
    extId?: string;
    /**
     * 
     * @type {string}
     * @memberof TrafficMessageType
     */
    type?: TrafficMessageTypeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TrafficMessageType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TrafficMessageType
     */
    desc?: string;
}


/**
 * @export
 */
export const TrafficMessageTypeTypeEnum = {
    U: 'U',
    Rclm: 'RCLM',
    Ac: 'AC',
    Rw: 'RW',
    At: 'AT',
    Co: 'CO',
    TrafficJam: 'TRAFFIC_JAM',
    Delay: 'DELAY',
    RoadClosed: 'ROAD_CLOSED',
    JunctionClosed: 'JUNCTION_CLOSED',
    LaneClosed: 'LANE_CLOSED',
    BurningVehicle: 'BURNING_VEHICLE',
    Accident: 'ACCIDENT',
    Danger: 'DANGER',
    Obstruction: 'OBSTRUCTION',
    RailRoadCrossing: 'RAIL_ROAD_CROSSING',
    TrafficLightsDefect: 'TRAFFIC_LIGHTS_DEFECT',
    Weather: 'WEATHER',
    WeatherIce: 'WEATHER_ICE',
    WeatherSnow: 'WEATHER_SNOW',
    WeatherPoorVisibility: 'WEATHER_POOR_VISIBILITY',
    WeatherHail: 'WEATHER_HAIL',
    WeatherWind: 'WEATHER_WIND',
    ConstructionSite: 'CONSTRUCTION_SITE'
} as const;
export type TrafficMessageTypeTypeEnum = typeof TrafficMessageTypeTypeEnum[keyof typeof TrafficMessageTypeTypeEnum];


/**
 * Check if a given object implements the TrafficMessageType interface.
 */
export function instanceOfTrafficMessageType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TrafficMessageTypeFromJSON(json: any): TrafficMessageType {
    return TrafficMessageTypeFromJSONTyped(json, false);
}

export function TrafficMessageTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrafficMessageType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'icon': !exists(json, 'icon') ? undefined : IconTypeFromJSON(json['icon']),
        'location': !exists(json, 'location') ? undefined : StopLocationFromJSON(json['location']),
        'polylineGroup': !exists(json, 'PolylineGroup') ? undefined : PolylineGroupFromJSON(json['PolylineGroup']),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'extId': !exists(json, 'extId') ? undefined : json['extId'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'desc': !exists(json, 'desc') ? undefined : json['desc'],
    };
}

export function TrafficMessageTypeToJSON(value?: TrafficMessageType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'icon': IconTypeToJSON(value.icon),
        'location': StopLocationToJSON(value.location),
        'PolylineGroup': PolylineGroupToJSON(value.polylineGroup),
        'id': value.id,
        'extId': value.extId,
        'type': value.type,
        'name': value.name,
        'desc': value.desc,
    };
}

