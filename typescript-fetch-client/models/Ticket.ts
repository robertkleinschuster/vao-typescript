/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ExternalContentType } from './ExternalContentType';
import {
    ExternalContentTypeFromJSON,
    ExternalContentTypeFromJSONTyped,
    ExternalContentTypeToJSON,
} from './ExternalContentType';
import type { KVType } from './KVType';
import {
    KVTypeFromJSON,
    KVTypeFromJSONTyped,
    KVTypeToJSON,
} from './KVType';

/**
 * 
 * @export
 * @interface Ticket
 */
export interface Ticket {
    /**
     * 
     * @type {Array<KVType>}
     * @memberof Ticket
     */
    readonly param?: Array<KVType>;
    /**
     * 
     * @type {ExternalContentType}
     * @memberof Ticket
     */
    externalContent?: ExternalContentType;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    desc?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    price?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    cur?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    shpCtx?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    fromLeg?: number;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    toLeg?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    fromLegId?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    toLegId?: string;
}

/**
 * Check if a given object implements the Ticket interface.
 */
export function instanceOfTicket(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TicketFromJSON(json: any): Ticket {
    return TicketFromJSONTyped(json, false);
}

export function TicketFromJSONTyped(json: any, ignoreDiscriminator: boolean): Ticket {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'param': !exists(json, 'param') ? undefined : ((json['param'] as Array<any>).map(KVTypeFromJSON)),
        'externalContent': !exists(json, 'externalContent') ? undefined : ExternalContentTypeFromJSON(json['externalContent']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'desc': !exists(json, 'desc') ? undefined : json['desc'],
        'price': !exists(json, 'price') ? undefined : json['price'],
        'cur': !exists(json, 'cur') ? undefined : json['cur'],
        'shpCtx': !exists(json, 'shpCtx') ? undefined : json['shpCtx'],
        'fromLeg': !exists(json, 'fromLeg') ? undefined : json['fromLeg'],
        'toLeg': !exists(json, 'toLeg') ? undefined : json['toLeg'],
        'fromLegId': !exists(json, 'fromLegId') ? undefined : json['fromLegId'],
        'toLegId': !exists(json, 'toLegId') ? undefined : json['toLegId'],
    };
}

export function TicketToJSON(value?: Ticket | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'externalContent': ExternalContentTypeToJSON(value.externalContent),
        'name': value.name,
        'desc': value.desc,
        'price': value.price,
        'cur': value.cur,
        'shpCtx': value.shpCtx,
        'fromLeg': value.fromLeg,
        'toLeg': value.toLeg,
        'fromLegId': value.fromLegId,
        'toLegId': value.toLegId,
    };
}

