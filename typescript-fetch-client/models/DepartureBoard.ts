/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Departure } from './Departure';
import {
    DepartureFromJSON,
    DepartureFromJSONTyped,
    DepartureToJSON,
} from './Departure';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';
import type { TechnicalMessages } from './TechnicalMessages';
import {
    TechnicalMessagesFromJSON,
    TechnicalMessagesFromJSONTyped,
    TechnicalMessagesToJSON,
} from './TechnicalMessages';
import type { Warnings } from './Warnings';
import {
    WarningsFromJSON,
    WarningsFromJSONTyped,
    WarningsToJSON,
} from './Warnings';

/**
 * 
 * @export
 * @interface DepartureBoard
 */
export interface DepartureBoard {
    /**
     * 
     * @type {TechnicalMessages}
     * @memberof DepartureBoard
     */
    technicalMessages?: TechnicalMessages;
    /**
     * 
     * @type {Warnings}
     * @memberof DepartureBoard
     */
    warnings?: Warnings;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    serverVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    dialectVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    version?: string;
    /**
     * 
     * @type {Date}
     * @memberof DepartureBoard
     */
    planRtTs?: Date;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    errorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    errorText?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    requestId?: string;
    /**
     * 
     * @type {Array<Departure>}
     * @memberof DepartureBoard
     */
    departure?: Array<Departure>;
    /**
     * 
     * @type {Array<Message>}
     * @memberof DepartureBoard
     */
    message?: Array<Message>;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    stopid?: string;
    /**
     * 
     * @type {string}
     * @memberof DepartureBoard
     */
    stopExtId?: string;
}

/**
 * Check if a given object implements the DepartureBoard interface.
 */
export function instanceOfDepartureBoard(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DepartureBoardFromJSON(json: any): DepartureBoard {
    return DepartureBoardFromJSONTyped(json, false);
}

export function DepartureBoardFromJSONTyped(json: any, ignoreDiscriminator: boolean): DepartureBoard {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'technicalMessages': !exists(json, 'TechnicalMessages') ? undefined : TechnicalMessagesFromJSON(json['TechnicalMessages']),
        'warnings': !exists(json, 'Warnings') ? undefined : WarningsFromJSON(json['Warnings']),
        'serverVersion': !exists(json, 'serverVersion') ? undefined : json['serverVersion'],
        'dialectVersion': !exists(json, 'dialectVersion') ? undefined : json['dialectVersion'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'planRtTs': !exists(json, 'planRtTs') ? undefined : (new Date(json['planRtTs'])),
        'errorCode': !exists(json, 'errorCode') ? undefined : json['errorCode'],
        'errorText': !exists(json, 'errorText') ? undefined : json['errorText'],
        'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
        'departure': !exists(json, 'Departure') ? undefined : ((json['Departure'] as Array<any>).map(DepartureFromJSON)),
        'message': !exists(json, 'Message') ? undefined : ((json['Message'] as Array<any>).map(MessageFromJSON)),
        'stopid': !exists(json, 'stopid') ? undefined : json['stopid'],
        'stopExtId': !exists(json, 'stopExtId') ? undefined : json['stopExtId'],
    };
}

export function DepartureBoardToJSON(value?: DepartureBoard | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'TechnicalMessages': TechnicalMessagesToJSON(value.technicalMessages),
        'Warnings': WarningsToJSON(value.warnings),
        'serverVersion': value.serverVersion,
        'dialectVersion': value.dialectVersion,
        'version': value.version,
        'planRtTs': value.planRtTs === undefined ? undefined : (value.planRtTs.toISOString()),
        'errorCode': value.errorCode,
        'errorText': value.errorText,
        'requestId': value.requestId,
        'Departure': value.departure === undefined ? undefined : ((value.departure as Array<any>).map(DepartureToJSON)),
        'Message': value.message === undefined ? undefined : ((value.message as Array<any>).map(MessageToJSON)),
        'stopid': value.stopid,
        'stopExtId': value.stopExtId,
    };
}

