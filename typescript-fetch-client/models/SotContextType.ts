/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SotContextType
 */
export interface SotContextType {
    /**
     * 
     * @type {string}
     * @memberof SotContextType
     */
    calcDate?: string;
    /**
     * 
     * @type {string}
     * @memberof SotContextType
     */
    calcTime?: string;
    /**
     * 
     * @type {string}
     * @memberof SotContextType
     */
    journeyId?: string;
    /**
     * 
     * @type {string}
     * @memberof SotContextType
     */
    trainName?: string;
    /**
     * 
     * @type {number}
     * @memberof SotContextType
     */
    legIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof SotContextType
     */
    legIdxFootPathConnection?: number;
    /**
     * 
     * @type {number}
     * @memberof SotContextType
     */
    prevLocRouteIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof SotContextType
     */
    curLocRouteIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof SotContextType
     */
    locRouteIdxFootPathConnection?: number;
    /**
     * 
     * @type {string}
     * @memberof SotContextType
     */
    locMode: SotContextTypeLocModeEnum;
}


/**
 * @export
 */
export const SotContextTypeLocModeEnum = {
    Unknown: 'UNKNOWN',
    FromStart: 'FROM_START',
    InTrain: 'IN_TRAIN',
    AtPassedStop: 'AT_PASSED_STOP',
    AtChangeStop: 'AT_CHANGE_STOP',
    BeforeTravel: 'BEFORE_TRAVEL',
    AtDestination: 'AT_DESTINATION',
    Error: 'ERROR',
    ErrorSearchFromTrainBeforeStart: 'ERROR_SEARCH_FROM_TRAIN_BEFORE_START',
    ErrorInReconstruction: 'ERROR_IN_RECONSTRUCTION',
    ToBeDefinedInServer: 'TO_BE_DEFINED_IN_SERVER',
    ErrorTrainCancelled: 'ERROR_TRAIN_CANCELLED',
    CheckCompleteTrain: 'CHECK_COMPLETE_TRAIN',
    AtLastUsableStop: 'AT_LAST_USABLE_STOP',
    ErrorAllTrainsFiltered: 'ERROR_ALL_TRAINS_FILTERED',
    ErrorStayInCurrentConnection: 'ERROR_STAY_IN_CURRENT_CONNECTION'
} as const;
export type SotContextTypeLocModeEnum = typeof SotContextTypeLocModeEnum[keyof typeof SotContextTypeLocModeEnum];


/**
 * Check if a given object implements the SotContextType interface.
 */
export function instanceOfSotContextType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "locMode" in value;

    return isInstance;
}

export function SotContextTypeFromJSON(json: any): SotContextType {
    return SotContextTypeFromJSONTyped(json, false);
}

export function SotContextTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SotContextType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'calcDate': !exists(json, 'calcDate') ? undefined : json['calcDate'],
        'calcTime': !exists(json, 'calcTime') ? undefined : json['calcTime'],
        'journeyId': !exists(json, 'journeyId') ? undefined : json['journeyId'],
        'trainName': !exists(json, 'trainName') ? undefined : json['trainName'],
        'legIdx': !exists(json, 'legIdx') ? undefined : json['legIdx'],
        'legIdxFootPathConnection': !exists(json, 'legIdxFootPathConnection') ? undefined : json['legIdxFootPathConnection'],
        'prevLocRouteIdx': !exists(json, 'prevLocRouteIdx') ? undefined : json['prevLocRouteIdx'],
        'curLocRouteIdx': !exists(json, 'curLocRouteIdx') ? undefined : json['curLocRouteIdx'],
        'locRouteIdxFootPathConnection': !exists(json, 'locRouteIdxFootPathConnection') ? undefined : json['locRouteIdxFootPathConnection'],
        'locMode': json['locMode'],
    };
}

export function SotContextTypeToJSON(value?: SotContextType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'calcDate': value.calcDate,
        'calcTime': value.calcTime,
        'journeyId': value.journeyId,
        'trainName': value.trainName,
        'legIdx': value.legIdx,
        'legIdxFootPathConnection': value.legIdxFootPathConnection,
        'prevLocRouteIdx': value.prevLocRouteIdx,
        'curLocRouteIdx': value.curLocRouteIdx,
        'locRouteIdxFootPathConnection': value.locRouteIdxFootPathConnection,
        'locMode': value.locMode,
    };
}

