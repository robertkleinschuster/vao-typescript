/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JourneyType } from './JourneyType';
import {
    JourneyTypeFromJSON,
    JourneyTypeFromJSONTyped,
    JourneyTypeToJSON,
} from './JourneyType';

/**
 * 
 * @export
 * @interface ReferencedJourneyType
 */
export interface ReferencedJourneyType {
    /**
     * 
     * @type {JourneyType}
     * @memberof ReferencedJourneyType
     */
    journey?: JourneyType;
    /**
     * 
     * @type {string}
     * @memberof ReferencedJourneyType
     */
    type: ReferencedJourneyTypeTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof ReferencedJourneyType
     */
    origFromIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof ReferencedJourneyType
     */
    origToIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof ReferencedJourneyType
     */
    refFromIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof ReferencedJourneyType
     */
    refToIdx?: number;
}


/**
 * @export
 */
export const ReferencedJourneyTypeTypeEnum = {
    Undef: 'UNDEF',
    Default: 'DEFAULT',
    IstErsatzfahrt: 'IST_ERSATZFAHRT',
    IstVerstaerkerfahrt: 'IST_VERSTAERKERFAHRT',
    IstFortfuehrung: 'IST_FORTFUEHRUNG',
    IstTrennung: 'IST_TRENNUNG',
    IstFortfuehrungVonTrennung: 'IST_FORTFUEHRUNG_VON_TRENNUNG',
    IstZusammenfuehrung: 'IST_ZUSAMMENFUEHRUNG',
    IstFortfuehrungDurchZusammenfuehrung: 'IST_FORTFUEHRUNG_DURCH_ZUSAMMENFUEHRUNG',
    IstEntlastung: 'IST_ENTLASTUNG',
    DefaultR: 'DEFAULT_R',
    HatErsatzfahrt: 'HAT_ERSATZFAHRT',
    HatVerstaerkerfahrt: 'HAT_VERSTAERKERFAHRT',
    HatFortfuehrung: 'HAT_FORTFUEHRUNG',
    HatTrennung: 'HAT_TRENNUNG',
    HatFortfuehrungVonTrennung: 'HAT_FORTFUEHRUNG_VON_TRENNUNG',
    HatZusammenfuehrung: 'HAT_ZUSAMMENFUEHRUNG',
    HatFortfuehrungDurchZusammenfuehrung: 'HAT_FORTFUEHRUNG_DURCH_ZUSAMMENFUEHRUNG',
    HatEntlastung: 'HAT_ENTLASTUNG'
} as const;
export type ReferencedJourneyTypeTypeEnum = typeof ReferencedJourneyTypeTypeEnum[keyof typeof ReferencedJourneyTypeTypeEnum];


/**
 * Check if a given object implements the ReferencedJourneyType interface.
 */
export function instanceOfReferencedJourneyType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ReferencedJourneyTypeFromJSON(json: any): ReferencedJourneyType {
    return ReferencedJourneyTypeFromJSONTyped(json, false);
}

export function ReferencedJourneyTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReferencedJourneyType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'journey': !exists(json, 'journey') ? undefined : JourneyTypeFromJSON(json['journey']),
        'type': json['type'],
        'origFromIdx': !exists(json, 'origFromIdx') ? undefined : json['origFromIdx'],
        'origToIdx': !exists(json, 'origToIdx') ? undefined : json['origToIdx'],
        'refFromIdx': !exists(json, 'refFromIdx') ? undefined : json['refFromIdx'],
        'refToIdx': !exists(json, 'refToIdx') ? undefined : json['refToIdx'],
    };
}

export function ReferencedJourneyTypeToJSON(value?: ReferencedJourneyType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'journey': JourneyTypeToJSON(value.journey),
        'type': value.type,
        'origFromIdx': value.origFromIdx,
        'origToIdx': value.origToIdx,
        'refFromIdx': value.refFromIdx,
        'refToIdx': value.refToIdx,
    };
}

