/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PricingType } from './PricingType';
import {
    PricingTypeFromJSON,
    PricingTypeFromJSONTyped,
    PricingTypeToJSON,
} from './PricingType';
import type { ResultStatusType } from './ResultStatusType';
import {
    ResultStatusTypeFromJSON,
    ResultStatusTypeFromJSONTyped,
    ResultStatusTypeToJSON,
} from './ResultStatusType';
import type { SortingType } from './SortingType';
import {
    SortingTypeFromJSON,
    SortingTypeFromJSONTyped,
    SortingTypeToJSON,
} from './SortingType';
import type { SotContextType } from './SotContextType';
import {
    SotContextTypeFromJSON,
    SotContextTypeFromJSONTyped,
    SotContextTypeToJSON,
} from './SotContextType';
import type { TechnicalMessages } from './TechnicalMessages';
import {
    TechnicalMessagesFromJSON,
    TechnicalMessagesFromJSONTyped,
    TechnicalMessagesToJSON,
} from './TechnicalMessages';
import type { TripType } from './TripType';
import {
    TripTypeFromJSON,
    TripTypeFromJSONTyped,
    TripTypeToJSON,
} from './TripType';
import type { Warnings } from './Warnings';
import {
    WarningsFromJSON,
    WarningsFromJSONTyped,
    WarningsToJSON,
} from './Warnings';

/**
 * 
 * @export
 * @interface TripList
 */
export interface TripList {
    /**
     * 
     * @type {TechnicalMessages}
     * @memberof TripList
     */
    technicalMessages?: TechnicalMessages;
    /**
     * 
     * @type {Warnings}
     * @memberof TripList
     */
    warnings?: Warnings;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    serverVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    dialectVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    version?: string;
    /**
     * 
     * @type {Date}
     * @memberof TripList
     */
    planRtTs?: Date;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    errorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    errorText?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    requestId?: string;
    /**
     * 
     * @type {Array<TripType>}
     * @memberof TripList
     */
    trip?: Array<TripType>;
    /**
     * 
     * @type {Array<PricingType>}
     * @memberof TripList
     */
    pricing?: Array<PricingType>;
    /**
     * 
     * @type {SotContextType}
     * @memberof TripList
     */
    sotContext?: SotContextType;
    /**
     * 
     * @type {ResultStatusType}
     * @memberof TripList
     */
    resultStatus?: ResultStatusType;
    /**
     * 
     * @type {SortingType}
     * @memberof TripList
     */
    sorting?: SortingType;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    scrB?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    scrF?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    scrReturnB?: string;
    /**
     * 
     * @type {string}
     * @memberof TripList
     */
    scrReturnF?: string;
}

/**
 * Check if a given object implements the TripList interface.
 */
export function instanceOfTripList(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function TripListFromJSON(json: any): TripList {
    return TripListFromJSONTyped(json, false);
}

export function TripListFromJSONTyped(json: any, ignoreDiscriminator: boolean): TripList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'technicalMessages': !exists(json, 'TechnicalMessages') ? undefined : TechnicalMessagesFromJSON(json['TechnicalMessages']),
        'warnings': !exists(json, 'Warnings') ? undefined : WarningsFromJSON(json['Warnings']),
        'serverVersion': !exists(json, 'serverVersion') ? undefined : json['serverVersion'],
        'dialectVersion': !exists(json, 'dialectVersion') ? undefined : json['dialectVersion'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'planRtTs': !exists(json, 'planRtTs') ? undefined : (new Date(json['planRtTs'])),
        'errorCode': !exists(json, 'errorCode') ? undefined : json['errorCode'],
        'errorText': !exists(json, 'errorText') ? undefined : json['errorText'],
        'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
        'trip': !exists(json, 'Trip') ? undefined : ((json['Trip'] as Array<any>).map(TripTypeFromJSON)),
        'pricing': !exists(json, 'Pricing') ? undefined : ((json['Pricing'] as Array<any>).map(PricingTypeFromJSON)),
        'sotContext': !exists(json, 'SotContext') ? undefined : SotContextTypeFromJSON(json['SotContext']),
        'resultStatus': !exists(json, 'ResultStatus') ? undefined : ResultStatusTypeFromJSON(json['ResultStatus']),
        'sorting': !exists(json, 'Sorting') ? undefined : SortingTypeFromJSON(json['Sorting']),
        'scrB': !exists(json, 'scrB') ? undefined : json['scrB'],
        'scrF': !exists(json, 'scrF') ? undefined : json['scrF'],
        'scrReturnB': !exists(json, 'scrReturnB') ? undefined : json['scrReturnB'],
        'scrReturnF': !exists(json, 'scrReturnF') ? undefined : json['scrReturnF'],
    };
}

export function TripListToJSON(value?: TripList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'TechnicalMessages': TechnicalMessagesToJSON(value.technicalMessages),
        'Warnings': WarningsToJSON(value.warnings),
        'serverVersion': value.serverVersion,
        'dialectVersion': value.dialectVersion,
        'version': value.version,
        'planRtTs': value.planRtTs === undefined ? undefined : (value.planRtTs.toISOString()),
        'errorCode': value.errorCode,
        'errorText': value.errorText,
        'requestId': value.requestId,
        'Trip': value.trip === undefined ? undefined : ((value.trip as Array<any>).map(TripTypeToJSON)),
        'Pricing': value.pricing === undefined ? undefined : ((value.pricing as Array<any>).map(PricingTypeToJSON)),
        'SotContext': SotContextTypeToJSON(value.sotContext),
        'ResultStatus': ResultStatusTypeToJSON(value.resultStatus),
        'Sorting': SortingTypeToJSON(value.sorting),
        'scrB': value.scrB,
        'scrF': value.scrF,
        'scrReturnB': value.scrReturnB,
        'scrReturnF': value.scrReturnF,
    };
}

