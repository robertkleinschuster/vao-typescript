/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AffectedStopType } from './AffectedStopType';
import {
    AffectedStopTypeFromJSON,
    AffectedStopTypeFromJSONTyped,
    AffectedStopTypeToJSON,
} from './AffectedStopType';
import type { JourneyType } from './JourneyType';
import {
    JourneyTypeFromJSON,
    JourneyTypeFromJSONTyped,
    JourneyTypeToJSON,
} from './JourneyType';
import type { MessageCategoryType } from './MessageCategoryType';
import {
    MessageCategoryTypeFromJSON,
    MessageCategoryTypeFromJSONTyped,
    MessageCategoryTypeToJSON,
} from './MessageCategoryType';
import type { MessageChannelType } from './MessageChannelType';
import {
    MessageChannelTypeFromJSON,
    MessageChannelTypeFromJSONTyped,
    MessageChannelTypeToJSON,
} from './MessageChannelType';
import type { MessageEdgeType } from './MessageEdgeType';
import {
    MessageEdgeTypeFromJSON,
    MessageEdgeTypeFromJSONTyped,
    MessageEdgeTypeToJSON,
} from './MessageEdgeType';
import type { MessageEventType } from './MessageEventType';
import {
    MessageEventTypeFromJSON,
    MessageEventTypeFromJSONTyped,
    MessageEventTypeToJSON,
} from './MessageEventType';
import type { MessageRegionType } from './MessageRegionType';
import {
    MessageRegionTypeFromJSON,
    MessageRegionTypeFromJSONTyped,
    MessageRegionTypeToJSON,
} from './MessageRegionType';
import type { MessageTextType } from './MessageTextType';
import {
    MessageTextTypeFromJSON,
    MessageTextTypeFromJSONTyped,
    MessageTextTypeToJSON,
} from './MessageTextType';
import type { Note } from './Note';
import {
    NoteFromJSON,
    NoteFromJSONTyped,
    NoteToJSON,
} from './Note';
import type { ProductType } from './ProductType';
import {
    ProductTypeFromJSON,
    ProductTypeFromJSONTyped,
    ProductTypeToJSON,
} from './ProductType';
import type { ServiceDays } from './ServiceDays';
import {
    ServiceDaysFromJSON,
    ServiceDaysFromJSONTyped,
    ServiceDaysToJSON,
} from './ServiceDays';
import type { StopType } from './StopType';
import {
    StopTypeFromJSON,
    StopTypeFromJSONTyped,
    StopTypeToJSON,
} from './StopType';
import type { TagsType } from './TagsType';
import {
    TagsTypeFromJSON,
    TagsTypeFromJSONTyped,
    TagsTypeToJSON,
} from './TagsType';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    dailyDuration?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    stime?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    sdate?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    etime?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    edate?: string;
    /**
     * 
     * @type {Array<ProductType>}
     * @memberof Message
     */
    readonly affectedProduct?: Array<ProductType>;
    /**
     * 
     * @type {Array<JourneyType>}
     * @memberof Message
     */
    readonly affectedJourney?: Array<JourneyType>;
    /**
     * 
     * @type {Array<MessageEdgeType>}
     * @memberof Message
     */
    readonly edge?: Array<MessageEdgeType>;
    /**
     * 
     * @type {Array<MessageRegionType>}
     * @memberof Message
     */
    readonly region?: Array<MessageRegionType>;
    /**
     * 
     * @type {Array<MessageEventType>}
     * @memberof Message
     */
    readonly event?: Array<MessageEventType>;
    /**
     * 
     * @type {AffectedStopType}
     * @memberof Message
     */
    affectedStops?: AffectedStopType;
    /**
     * 
     * @type {StopType}
     * @memberof Message
     */
    validFromStop?: StopType;
    /**
     * 
     * @type {StopType}
     * @memberof Message
     */
    validToStop?: StopType;
    /**
     * 
     * @type {TagsType}
     * @memberof Message
     */
    tags?: TagsType;
    /**
     * 
     * @type {Array<MessageChannelType>}
     * @memberof Message
     */
    readonly channel?: Array<MessageChannelType>;
    /**
     * 
     * @type {Array<MessageCategoryType>}
     * @memberof Message
     */
    readonly messageCategory?: Array<MessageCategoryType>;
    /**
     * 
     * @type {Array<MessageTextType>}
     * @memberof Message
     */
    readonly messageText?: Array<MessageTextType>;
    /**
     * 
     * @type {ServiceDays}
     * @memberof Message
     */
    validityDays?: ServiceDays;
    /**
     * 
     * @type {Array<Note>}
     * @memberof Message
     */
    readonly note?: Array<Note>;
    /**
     * 
     * @type {Array<Message>}
     * @memberof Message
     */
    readonly message?: Array<Message>;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    externalId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Message
     */
    act?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    head?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    lead?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    textInternal?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    customText?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    tckr?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    category?: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    priority?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    products?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    icon?: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    routeIdxFrom?: number;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    routeIdxTo?: number;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    sTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    sDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    eTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    eDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    altStart?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    altEnd?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    modTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    modDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    dailyStartingAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    baseType?: MessageBaseTypeEnum;
}


/**
 * @export
 */
export const MessageBaseTypeEnum = {
    Undef: 'UNDEF',
    Global: 'GLOBAL',
    Infrastructure: 'INFRASTRUCTURE'
} as const;
export type MessageBaseTypeEnum = typeof MessageBaseTypeEnum[keyof typeof MessageBaseTypeEnum];


/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dailyDuration': !exists(json, 'dailyDuration') ? undefined : json['dailyDuration'],
        'stime': !exists(json, 'stime') ? undefined : json['stime'],
        'sdate': !exists(json, 'sdate') ? undefined : json['sdate'],
        'etime': !exists(json, 'etime') ? undefined : json['etime'],
        'edate': !exists(json, 'edate') ? undefined : json['edate'],
        'affectedProduct': !exists(json, 'affectedProduct') ? undefined : ((json['affectedProduct'] as Array<any>).map(ProductTypeFromJSON)),
        'affectedJourney': !exists(json, 'affectedJourney') ? undefined : ((json['affectedJourney'] as Array<any>).map(JourneyTypeFromJSON)),
        'edge': !exists(json, 'edge') ? undefined : ((json['edge'] as Array<any>).map(MessageEdgeTypeFromJSON)),
        'region': !exists(json, 'region') ? undefined : ((json['region'] as Array<any>).map(MessageRegionTypeFromJSON)),
        'event': !exists(json, 'event') ? undefined : ((json['event'] as Array<any>).map(MessageEventTypeFromJSON)),
        'affectedStops': !exists(json, 'affectedStops') ? undefined : AffectedStopTypeFromJSON(json['affectedStops']),
        'validFromStop': !exists(json, 'validFromStop') ? undefined : StopTypeFromJSON(json['validFromStop']),
        'validToStop': !exists(json, 'validToStop') ? undefined : StopTypeFromJSON(json['validToStop']),
        'tags': !exists(json, 'tags') ? undefined : TagsTypeFromJSON(json['tags']),
        'channel': !exists(json, 'channel') ? undefined : ((json['channel'] as Array<any>).map(MessageChannelTypeFromJSON)),
        'messageCategory': !exists(json, 'messageCategory') ? undefined : ((json['messageCategory'] as Array<any>).map(MessageCategoryTypeFromJSON)),
        'messageText': !exists(json, 'messageText') ? undefined : ((json['messageText'] as Array<any>).map(MessageTextTypeFromJSON)),
        'validityDays': !exists(json, 'validityDays') ? undefined : ServiceDaysFromJSON(json['validityDays']),
        'note': !exists(json, 'Note') ? undefined : ((json['Note'] as Array<any>).map(NoteFromJSON)),
        'message': !exists(json, 'message') ? undefined : ((json['message'] as Array<any>).map(MessageFromJSON)),
        'id': json['id'],
        'externalId': !exists(json, 'externalId') ? undefined : json['externalId'],
        'act': !exists(json, 'act') ? undefined : json['act'],
        'head': !exists(json, 'head') ? undefined : json['head'],
        'lead': !exists(json, 'lead') ? undefined : json['lead'],
        'text': !exists(json, 'text') ? undefined : json['text'],
        'textInternal': !exists(json, 'textInternal') ? undefined : json['textInternal'],
        'customText': !exists(json, 'customText') ? undefined : json['customText'],
        'tckr': !exists(json, 'tckr') ? undefined : json['tckr'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'priority': !exists(json, 'priority') ? undefined : json['priority'],
        'products': !exists(json, 'products') ? undefined : json['products'],
        'icon': !exists(json, 'icon') ? undefined : json['icon'],
        'routeIdxFrom': !exists(json, 'routeIdxFrom') ? undefined : json['routeIdxFrom'],
        'routeIdxTo': !exists(json, 'routeIdxTo') ? undefined : json['routeIdxTo'],
        'sTime': !exists(json, 'sTime') ? undefined : json['sTime'],
        'sDate': !exists(json, 'sDate') ? undefined : json['sDate'],
        'eTime': !exists(json, 'eTime') ? undefined : json['eTime'],
        'eDate': !exists(json, 'eDate') ? undefined : json['eDate'],
        'altStart': !exists(json, 'altStart') ? undefined : json['altStart'],
        'altEnd': !exists(json, 'altEnd') ? undefined : json['altEnd'],
        'modTime': !exists(json, 'modTime') ? undefined : json['modTime'],
        'modDate': !exists(json, 'modDate') ? undefined : json['modDate'],
        'dailyStartingAt': !exists(json, 'dailyStartingAt') ? undefined : json['dailyStartingAt'],
        'baseType': !exists(json, 'baseType') ? undefined : json['baseType'],
    };
}

export function MessageToJSON(value?: Message | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dailyDuration': value.dailyDuration,
        'stime': value.stime,
        'sdate': value.sdate,
        'etime': value.etime,
        'edate': value.edate,
        'affectedStops': AffectedStopTypeToJSON(value.affectedStops),
        'validFromStop': StopTypeToJSON(value.validFromStop),
        'validToStop': StopTypeToJSON(value.validToStop),
        'tags': TagsTypeToJSON(value.tags),
        'validityDays': ServiceDaysToJSON(value.validityDays),
        'id': value.id,
        'externalId': value.externalId,
        'act': value.act,
        'head': value.head,
        'lead': value.lead,
        'text': value.text,
        'textInternal': value.textInternal,
        'customText': value.customText,
        'tckr': value.tckr,
        'company': value.company,
        'category': value.category,
        'priority': value.priority,
        'products': value.products,
        'icon': value.icon,
        'routeIdxFrom': value.routeIdxFrom,
        'routeIdxTo': value.routeIdxTo,
        'sTime': value.sTime,
        'sDate': value.sDate,
        'eTime': value.eTime,
        'eDate': value.eDate,
        'altStart': value.altStart,
        'altEnd': value.altEnd,
        'modTime': value.modTime,
        'modDate': value.modDate,
        'dailyStartingAt': value.dailyStartingAt,
        'baseType': value.baseType,
    };
}

