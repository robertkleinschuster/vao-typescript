/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Notes } from './Notes';
import {
    NotesFromJSON,
    NotesFromJSONTyped,
    NotesToJSON,
} from './Notes';
import type { OccupancyType } from './OccupancyType';
import {
    OccupancyTypeFromJSON,
    OccupancyTypeFromJSONTyped,
    OccupancyTypeToJSON,
} from './OccupancyType';
import type { PlatformType } from './PlatformType';
import {
    PlatformTypeFromJSON,
    PlatformTypeFromJSONTyped,
    PlatformTypeToJSON,
} from './PlatformType';
import type { StopLocation } from './StopLocation';
import {
    StopLocationFromJSON,
    StopLocationFromJSONTyped,
    StopLocationToJSON,
} from './StopLocation';
import type { WeatherInformationType } from './WeatherInformationType';
import {
    WeatherInformationTypeFromJSON,
    WeatherInformationTypeFromJSONTyped,
    WeatherInformationTypeToJSON,
} from './WeatherInformationType';

/**
 * 
 * @export
 * @interface StopType
 */
export interface StopType {
    /**
     * 
     * @type {Notes}
     * @memberof StopType
     */
    notes?: Notes;
    /**
     * 
     * @type {Array<string>}
     * @memberof StopType
     */
    altId?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StopType
     */
    mainMastAltId?: Array<string>;
    /**
     * 
     * @type {Array<OccupancyType>}
     * @memberof StopType
     */
    occupancy?: Array<OccupancyType>;
    /**
     * 
     * @type {PlatformType}
     * @memberof StopType
     */
    arrPlatform?: PlatformType;
    /**
     * 
     * @type {PlatformType}
     * @memberof StopType
     */
    rtArrPlatform?: PlatformType;
    /**
     * 
     * @type {PlatformType}
     * @memberof StopType
     */
    depPlatform?: PlatformType;
    /**
     * 
     * @type {PlatformType}
     * @memberof StopType
     */
    rtDepPlatform?: PlatformType;
    /**
     * 
     * @type {Array<WeatherInformationType>}
     * @memberof StopType
     */
    weatherInformation?: Array<WeatherInformationType>;
    /**
     * 
     * @type {StopLocation}
     * @memberof StopType
     */
    mainMast?: StopLocation;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    extId: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    routeIdx?: number;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    lon?: number;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    lat?: number;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    alt?: number;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    arrPrognosisType?: StopTypeArrPrognosisTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    depPrognosisType?: StopTypeDepPrognosisTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    depTime?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    depDate?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    depTz?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    scheduledDepTimeChanged?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    arrTime?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    arrDate?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    arrTz?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    scheduledArrTimeChanged?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    passingTime?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    passingDate?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    passingTz?: number;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    arrTrack?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    arrTrackHidden?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    depTrack?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    depTrackHidden?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtDepTime?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtDepDate?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    rtDepTz?: number;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtArrTime?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtArrDate?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    rtArrTz?: number;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtArrTrack?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    rtArrTrackHidden?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtDepTrack?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    rtDepTrackHidden?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtPassingTime?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtPassingDate?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    rtPassingTz?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    cancelled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    cancelledDeparture?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    cancelledArrival?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    isMainMast?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    hasMainMast?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    mainMastId?: string;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    mainMastExtId?: string;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    mainMastLon?: number;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    mainMastLat?: number;
    /**
     * 
     * @type {number}
     * @memberof StopType
     */
    mainMastAlt?: number;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    alighting?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    boarding?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    rtAlighting?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    rtBoarding?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    additional?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    isBorderStop?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    isTurningPoint?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    arrHide?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    depHide?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    depDir?: string;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    entry?: boolean;
    /**
     * 
     * @type {string}
     * @memberof StopType
     */
    rtCnclDataSourceType?: StopTypeRtCnclDataSourceTypeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    arrUncertainDelay?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StopType
     */
    depUncertainDelay?: boolean;
}


/**
 * @export
 */
export const StopTypeArrPrognosisTypeEnum = {
    Prognosed: 'PROGNOSED',
    Manual: 'MANUAL',
    Reported: 'REPORTED',
    Corrected: 'CORRECTED',
    Calculated: 'CALCULATED'
} as const;
export type StopTypeArrPrognosisTypeEnum = typeof StopTypeArrPrognosisTypeEnum[keyof typeof StopTypeArrPrognosisTypeEnum];

/**
 * @export
 */
export const StopTypeDepPrognosisTypeEnum = {
    Prognosed: 'PROGNOSED',
    Manual: 'MANUAL',
    Reported: 'REPORTED',
    Corrected: 'CORRECTED',
    Calculated: 'CALCULATED'
} as const;
export type StopTypeDepPrognosisTypeEnum = typeof StopTypeDepPrognosisTypeEnum[keyof typeof StopTypeDepPrognosisTypeEnum];

/**
 * @export
 */
export const StopTypeRtCnclDataSourceTypeEnum = {
    Default: 'DEFAULT',
    Vdv: 'VDV',
    Him: 'HIM',
    Hrc: 'HRC',
    Siri: 'SIRI',
    Uic: 'UIC',
    Hrx: 'HRX',
    Gtfs: 'GTFS',
    Fis: 'FIS',
    Dds: 'DDS',
    Paisa: 'PAISA',
    Fe: 'FE',
    Blacklist: 'BLACKLIST',
    Aramis: 'ARAMIS',
    Rtabo2: 'RTABO2'
} as const;
export type StopTypeRtCnclDataSourceTypeEnum = typeof StopTypeRtCnclDataSourceTypeEnum[keyof typeof StopTypeRtCnclDataSourceTypeEnum];


/**
 * Check if a given object implements the StopType interface.
 */
export function instanceOfStopType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "extId" in value;

    return isInstance;
}

export function StopTypeFromJSON(json: any): StopType {
    return StopTypeFromJSONTyped(json, false);
}

export function StopTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): StopType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'notes': !exists(json, 'Notes') ? undefined : NotesFromJSON(json['Notes']),
        'altId': !exists(json, 'altId') ? undefined : json['altId'],
        'mainMastAltId': !exists(json, 'mainMastAltId') ? undefined : json['mainMastAltId'],
        'occupancy': !exists(json, 'Occupancy') ? undefined : ((json['Occupancy'] as Array<any>).map(OccupancyTypeFromJSON)),
        'arrPlatform': !exists(json, 'arrPlatform') ? undefined : PlatformTypeFromJSON(json['arrPlatform']),
        'rtArrPlatform': !exists(json, 'rtArrPlatform') ? undefined : PlatformTypeFromJSON(json['rtArrPlatform']),
        'depPlatform': !exists(json, 'depPlatform') ? undefined : PlatformTypeFromJSON(json['depPlatform']),
        'rtDepPlatform': !exists(json, 'rtDepPlatform') ? undefined : PlatformTypeFromJSON(json['rtDepPlatform']),
        'weatherInformation': !exists(json, 'weatherInformation') ? undefined : ((json['weatherInformation'] as Array<any>).map(WeatherInformationTypeFromJSON)),
        'mainMast': !exists(json, 'mainMast') ? undefined : StopLocationFromJSON(json['mainMast']),
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'id': json['id'],
        'extId': json['extId'],
        'routeIdx': !exists(json, 'routeIdx') ? undefined : json['routeIdx'],
        'lon': !exists(json, 'lon') ? undefined : json['lon'],
        'lat': !exists(json, 'lat') ? undefined : json['lat'],
        'alt': !exists(json, 'alt') ? undefined : json['alt'],
        'arrPrognosisType': !exists(json, 'arrPrognosisType') ? undefined : json['arrPrognosisType'],
        'depPrognosisType': !exists(json, 'depPrognosisType') ? undefined : json['depPrognosisType'],
        'depTime': !exists(json, 'depTime') ? undefined : json['depTime'],
        'depDate': !exists(json, 'depDate') ? undefined : json['depDate'],
        'depTz': !exists(json, 'depTz') ? undefined : json['depTz'],
        'scheduledDepTimeChanged': !exists(json, 'scheduledDepTimeChanged') ? undefined : json['scheduledDepTimeChanged'],
        'arrTime': !exists(json, 'arrTime') ? undefined : json['arrTime'],
        'arrDate': !exists(json, 'arrDate') ? undefined : json['arrDate'],
        'arrTz': !exists(json, 'arrTz') ? undefined : json['arrTz'],
        'scheduledArrTimeChanged': !exists(json, 'scheduledArrTimeChanged') ? undefined : json['scheduledArrTimeChanged'],
        'passingTime': !exists(json, 'passingTime') ? undefined : json['passingTime'],
        'passingDate': !exists(json, 'passingDate') ? undefined : json['passingDate'],
        'passingTz': !exists(json, 'passingTz') ? undefined : json['passingTz'],
        'arrTrack': !exists(json, 'arrTrack') ? undefined : json['arrTrack'],
        'arrTrackHidden': !exists(json, 'arrTrackHidden') ? undefined : json['arrTrackHidden'],
        'depTrack': !exists(json, 'depTrack') ? undefined : json['depTrack'],
        'depTrackHidden': !exists(json, 'depTrackHidden') ? undefined : json['depTrackHidden'],
        'rtDepTime': !exists(json, 'rtDepTime') ? undefined : json['rtDepTime'],
        'rtDepDate': !exists(json, 'rtDepDate') ? undefined : json['rtDepDate'],
        'rtDepTz': !exists(json, 'rtDepTz') ? undefined : json['rtDepTz'],
        'rtArrTime': !exists(json, 'rtArrTime') ? undefined : json['rtArrTime'],
        'rtArrDate': !exists(json, 'rtArrDate') ? undefined : json['rtArrDate'],
        'rtArrTz': !exists(json, 'rtArrTz') ? undefined : json['rtArrTz'],
        'rtArrTrack': !exists(json, 'rtArrTrack') ? undefined : json['rtArrTrack'],
        'rtArrTrackHidden': !exists(json, 'rtArrTrackHidden') ? undefined : json['rtArrTrackHidden'],
        'rtDepTrack': !exists(json, 'rtDepTrack') ? undefined : json['rtDepTrack'],
        'rtDepTrackHidden': !exists(json, 'rtDepTrackHidden') ? undefined : json['rtDepTrackHidden'],
        'rtPassingTime': !exists(json, 'rtPassingTime') ? undefined : json['rtPassingTime'],
        'rtPassingDate': !exists(json, 'rtPassingDate') ? undefined : json['rtPassingDate'],
        'rtPassingTz': !exists(json, 'rtPassingTz') ? undefined : json['rtPassingTz'],
        'cancelled': !exists(json, 'cancelled') ? undefined : json['cancelled'],
        'cancelledDeparture': !exists(json, 'cancelledDeparture') ? undefined : json['cancelledDeparture'],
        'cancelledArrival': !exists(json, 'cancelledArrival') ? undefined : json['cancelledArrival'],
        'isMainMast': !exists(json, 'isMainMast') ? undefined : json['isMainMast'],
        'hasMainMast': !exists(json, 'hasMainMast') ? undefined : json['hasMainMast'],
        'mainMastId': !exists(json, 'mainMastId') ? undefined : json['mainMastId'],
        'mainMastExtId': !exists(json, 'mainMastExtId') ? undefined : json['mainMastExtId'],
        'mainMastLon': !exists(json, 'mainMastLon') ? undefined : json['mainMastLon'],
        'mainMastLat': !exists(json, 'mainMastLat') ? undefined : json['mainMastLat'],
        'mainMastAlt': !exists(json, 'mainMastAlt') ? undefined : json['mainMastAlt'],
        'alighting': !exists(json, 'alighting') ? undefined : json['alighting'],
        'boarding': !exists(json, 'boarding') ? undefined : json['boarding'],
        'rtAlighting': !exists(json, 'rtAlighting') ? undefined : json['rtAlighting'],
        'rtBoarding': !exists(json, 'rtBoarding') ? undefined : json['rtBoarding'],
        'additional': !exists(json, 'additional') ? undefined : json['additional'],
        'isBorderStop': !exists(json, 'isBorderStop') ? undefined : json['isBorderStop'],
        'isTurningPoint': !exists(json, 'isTurningPoint') ? undefined : json['isTurningPoint'],
        'arrHide': !exists(json, 'arrHide') ? undefined : json['arrHide'],
        'depHide': !exists(json, 'depHide') ? undefined : json['depHide'],
        'depDir': !exists(json, 'depDir') ? undefined : json['depDir'],
        'entry': !exists(json, 'entry') ? undefined : json['entry'],
        'rtCnclDataSourceType': !exists(json, 'rtCnclDataSourceType') ? undefined : json['rtCnclDataSourceType'],
        'arrUncertainDelay': !exists(json, 'arrUncertainDelay') ? undefined : json['arrUncertainDelay'],
        'depUncertainDelay': !exists(json, 'depUncertainDelay') ? undefined : json['depUncertainDelay'],
    };
}

export function StopTypeToJSON(value?: StopType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Notes': NotesToJSON(value.notes),
        'altId': value.altId,
        'mainMastAltId': value.mainMastAltId,
        'Occupancy': value.occupancy === undefined ? undefined : ((value.occupancy as Array<any>).map(OccupancyTypeToJSON)),
        'arrPlatform': PlatformTypeToJSON(value.arrPlatform),
        'rtArrPlatform': PlatformTypeToJSON(value.rtArrPlatform),
        'depPlatform': PlatformTypeToJSON(value.depPlatform),
        'rtDepPlatform': PlatformTypeToJSON(value.rtDepPlatform),
        'weatherInformation': value.weatherInformation === undefined ? undefined : ((value.weatherInformation as Array<any>).map(WeatherInformationTypeToJSON)),
        'mainMast': StopLocationToJSON(value.mainMast),
        'name': value.name,
        'description': value.description,
        'id': value.id,
        'extId': value.extId,
        'routeIdx': value.routeIdx,
        'lon': value.lon,
        'lat': value.lat,
        'alt': value.alt,
        'arrPrognosisType': value.arrPrognosisType,
        'depPrognosisType': value.depPrognosisType,
        'depTime': value.depTime,
        'depDate': value.depDate,
        'depTz': value.depTz,
        'scheduledDepTimeChanged': value.scheduledDepTimeChanged,
        'arrTime': value.arrTime,
        'arrDate': value.arrDate,
        'arrTz': value.arrTz,
        'scheduledArrTimeChanged': value.scheduledArrTimeChanged,
        'passingTime': value.passingTime,
        'passingDate': value.passingDate,
        'passingTz': value.passingTz,
        'arrTrack': value.arrTrack,
        'arrTrackHidden': value.arrTrackHidden,
        'depTrack': value.depTrack,
        'depTrackHidden': value.depTrackHidden,
        'rtDepTime': value.rtDepTime,
        'rtDepDate': value.rtDepDate,
        'rtDepTz': value.rtDepTz,
        'rtArrTime': value.rtArrTime,
        'rtArrDate': value.rtArrDate,
        'rtArrTz': value.rtArrTz,
        'rtArrTrack': value.rtArrTrack,
        'rtArrTrackHidden': value.rtArrTrackHidden,
        'rtDepTrack': value.rtDepTrack,
        'rtDepTrackHidden': value.rtDepTrackHidden,
        'rtPassingTime': value.rtPassingTime,
        'rtPassingDate': value.rtPassingDate,
        'rtPassingTz': value.rtPassingTz,
        'cancelled': value.cancelled,
        'cancelledDeparture': value.cancelledDeparture,
        'cancelledArrival': value.cancelledArrival,
        'isMainMast': value.isMainMast,
        'hasMainMast': value.hasMainMast,
        'mainMastId': value.mainMastId,
        'mainMastExtId': value.mainMastExtId,
        'mainMastLon': value.mainMastLon,
        'mainMastLat': value.mainMastLat,
        'mainMastAlt': value.mainMastAlt,
        'alighting': value.alighting,
        'boarding': value.boarding,
        'rtAlighting': value.rtAlighting,
        'rtBoarding': value.rtBoarding,
        'additional': value.additional,
        'isBorderStop': value.isBorderStop,
        'isTurningPoint': value.isTurningPoint,
        'arrHide': value.arrHide,
        'depHide': value.depHide,
        'depDir': value.depDir,
        'entry': value.entry,
        'rtCnclDataSourceType': value.rtCnclDataSourceType,
        'arrUncertainDelay': value.arrUncertainDelay,
        'depUncertainDelay': value.depUncertainDelay,
    };
}

