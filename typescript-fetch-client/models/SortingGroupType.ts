/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SortingGroupType
 */
export interface SortingGroupType {
    /**
     * 
     * @type {Array<string>}
     * @memberof SortingGroupType
     */
    readonly tripId: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SortingGroupType
     */
    type?: SortingGroupTypeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof SortingGroupType
     */
    name?: string;
}


/**
 * @export
 */
export const SortingGroupTypeTypeEnum = {
    Ti: 'TI',
    Co: 'CO',
    Cf: 'CF',
    Ut: 'UT',
    Dt: 'DT',
    At: 'AT',
    Pt: 'PT',
    Co2: 'CO2',
    Oc: 'OC',
    Cal: 'CAL'
} as const;
export type SortingGroupTypeTypeEnum = typeof SortingGroupTypeTypeEnum[keyof typeof SortingGroupTypeTypeEnum];


/**
 * Check if a given object implements the SortingGroupType interface.
 */
export function instanceOfSortingGroupType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "tripId" in value;

    return isInstance;
}

export function SortingGroupTypeFromJSON(json: any): SortingGroupType {
    return SortingGroupTypeFromJSONTyped(json, false);
}

export function SortingGroupTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): SortingGroupType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tripId': json['tripId'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
    };
}

export function SortingGroupTypeToJSON(value?: SortingGroupType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'name': value.name,
    };
}

