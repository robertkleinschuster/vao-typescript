/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StopType } from './StopType';
import {
    StopTypeFromJSON,
    StopTypeFromJSONTyped,
    StopTypeToJSON,
} from './StopType';

/**
 * 
 * @export
 * @interface MessageEventType
 */
export interface MessageEventType {
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    stime?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    sdate?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    etime?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    edate?: string;
    /**
     * 
     * @type {StopType}
     * @memberof MessageEventType
     */
    sstop?: StopType;
    /**
     * 
     * @type {StopType}
     * @memberof MessageEventType
     */
    estop?: StopType;
    /**
     * 
     * @type {StopType}
     * @memberof MessageEventType
     */
    sStop?: StopType;
    /**
     * 
     * @type {StopType}
     * @memberof MessageEventType
     */
    eStop?: StopType;
    /**
     * 
     * @type {Array<string>}
     * @memberof MessageEventType
     */
    readonly sectionNum?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    sTime?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    sDate?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    eTime?: string;
    /**
     * 
     * @type {string}
     * @memberof MessageEventType
     */
    eDate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MessageEventType
     */
    current?: boolean;
}

/**
 * Check if a given object implements the MessageEventType interface.
 */
export function instanceOfMessageEventType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function MessageEventTypeFromJSON(json: any): MessageEventType {
    return MessageEventTypeFromJSONTyped(json, false);
}

export function MessageEventTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageEventType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'stime': !exists(json, 'stime') ? undefined : json['stime'],
        'sdate': !exists(json, 'sdate') ? undefined : json['sdate'],
        'etime': !exists(json, 'etime') ? undefined : json['etime'],
        'edate': !exists(json, 'edate') ? undefined : json['edate'],
        'sstop': !exists(json, 'sstop') ? undefined : StopTypeFromJSON(json['sstop']),
        'estop': !exists(json, 'estop') ? undefined : StopTypeFromJSON(json['estop']),
        'sStop': !exists(json, 'sStop') ? undefined : StopTypeFromJSON(json['sStop']),
        'eStop': !exists(json, 'eStop') ? undefined : StopTypeFromJSON(json['eStop']),
        'sectionNum': !exists(json, 'sectionNum') ? undefined : json['sectionNum'],
        'sTime': !exists(json, 'sTime') ? undefined : json['sTime'],
        'sDate': !exists(json, 'sDate') ? undefined : json['sDate'],
        'eTime': !exists(json, 'eTime') ? undefined : json['eTime'],
        'eDate': !exists(json, 'eDate') ? undefined : json['eDate'],
        'current': !exists(json, 'current') ? undefined : json['current'],
    };
}

export function MessageEventTypeToJSON(value?: MessageEventType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'stime': value.stime,
        'sdate': value.sdate,
        'etime': value.etime,
        'edate': value.edate,
        'sstop': StopTypeToJSON(value.sstop),
        'estop': StopTypeToJSON(value.estop),
        'sStop': StopTypeToJSON(value.sStop),
        'eStop': StopTypeToJSON(value.eStop),
        'sTime': value.sTime,
        'sDate': value.sDate,
        'eTime': value.eTime,
        'eDate': value.eDate,
        'current': value.current,
    };
}

