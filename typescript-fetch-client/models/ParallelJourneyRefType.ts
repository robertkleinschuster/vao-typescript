/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StopType } from './StopType';
import {
    StopTypeFromJSON,
    StopTypeFromJSONTyped,
    StopTypeToJSON,
} from './StopType';

/**
 * 
 * @export
 * @interface ParallelJourneyRefType
 */
export interface ParallelJourneyRefType {
    /**
     * 
     * @type {StopType}
     * @memberof ParallelJourneyRefType
     */
    fromLocation?: StopType;
    /**
     * 
     * @type {StopType}
     * @memberof ParallelJourneyRefType
     */
    toLocation?: StopType;
    /**
     * 
     * @type {string}
     * @memberof ParallelJourneyRefType
     */
    journeyDetailRef?: string;
    /**
     * 
     * @type {string}
     * @memberof ParallelJourneyRefType
     */
    type?: ParallelJourneyRefTypeTypeEnum;
}


/**
 * @export
 */
export const ParallelJourneyRefTypeTypeEnum = {
    Undef: 'UNDEF',
    Union: 'UNION',
    Throughcoach: 'THROUGHCOACH',
    Tiethrough: 'TIETHROUGH'
} as const;
export type ParallelJourneyRefTypeTypeEnum = typeof ParallelJourneyRefTypeTypeEnum[keyof typeof ParallelJourneyRefTypeTypeEnum];


/**
 * Check if a given object implements the ParallelJourneyRefType interface.
 */
export function instanceOfParallelJourneyRefType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ParallelJourneyRefTypeFromJSON(json: any): ParallelJourneyRefType {
    return ParallelJourneyRefTypeFromJSONTyped(json, false);
}

export function ParallelJourneyRefTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParallelJourneyRefType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromLocation': !exists(json, 'fromLocation') ? undefined : StopTypeFromJSON(json['fromLocation']),
        'toLocation': !exists(json, 'toLocation') ? undefined : StopTypeFromJSON(json['toLocation']),
        'journeyDetailRef': !exists(json, 'journeyDetailRef') ? undefined : json['journeyDetailRef'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function ParallelJourneyRefTypeToJSON(value?: ParallelJourneyRefType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fromLocation': StopTypeToJSON(value.fromLocation),
        'toLocation': StopTypeToJSON(value.toLocation),
        'journeyDetailRef': value.journeyDetailRef,
        'type': value.type,
    };
}

