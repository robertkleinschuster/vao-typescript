/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConnectionReliabilityType } from './ConnectionReliabilityType';
import {
    ConnectionReliabilityTypeFromJSON,
    ConnectionReliabilityTypeFromJSONTyped,
    ConnectionReliabilityTypeToJSON,
} from './ConnectionReliabilityType';
import type { EcoType } from './EcoType';
import {
    EcoTypeFromJSON,
    EcoTypeFromJSONTyped,
    EcoTypeToJSON,
} from './EcoType';
import type { FreqType } from './FreqType';
import {
    FreqTypeFromJSON,
    FreqTypeFromJSONTyped,
    FreqTypeToJSON,
} from './FreqType';
import type { LegList } from './LegList';
import {
    LegListFromJSON,
    LegListFromJSONTyped,
    LegListToJSON,
} from './LegList';
import type { Messages } from './Messages';
import {
    MessagesFromJSON,
    MessagesFromJSONTyped,
    MessagesToJSON,
} from './Messages';
import type { Notes } from './Notes';
import {
    NotesFromJSON,
    NotesFromJSONTyped,
    NotesToJSON,
} from './Notes';
import type { OccupancyType } from './OccupancyType';
import {
    OccupancyTypeFromJSON,
    OccupancyTypeFromJSONTyped,
    OccupancyTypeToJSON,
} from './OccupancyType';
import type { OriginDestType } from './OriginDestType';
import {
    OriginDestTypeFromJSON,
    OriginDestTypeFromJSONTyped,
    OriginDestTypeToJSON,
} from './OriginDestType';
import type { ServiceDays } from './ServiceDays';
import {
    ServiceDaysFromJSON,
    ServiceDaysFromJSONTyped,
    ServiceDaysToJSON,
} from './ServiceDays';
import type { StopType } from './StopType';
import {
    StopTypeFromJSON,
    StopTypeFromJSONTyped,
    StopTypeToJSON,
} from './StopType';
import type { TariffResult } from './TariffResult';
import {
    TariffResultFromJSON,
    TariffResultFromJSONTyped,
    TariffResultToJSON,
} from './TariffResult';
import type { TripStatusType } from './TripStatusType';
import {
    TripStatusTypeFromJSON,
    TripStatusTypeFromJSONTyped,
    TripStatusTypeToJSON,
} from './TripStatusType';

/**
 * 
 * @export
 * @interface TripType
 */
export interface TripType {
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    duration?: string;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    rtDuration?: string;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    combinedMinDuration?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TripType
     */
    _return?: boolean;
    /**
     * 
     * @type {OriginDestType}
     * @memberof TripType
     */
    origin: OriginDestType;
    /**
     * 
     * @type {OriginDestType}
     * @memberof TripType
     */
    destination: OriginDestType;
    /**
     * 
     * @type {Messages}
     * @memberof TripType
     */
    messages?: Messages;
    /**
     * 
     * @type {Notes}
     * @memberof TripType
     */
    notes?: Notes;
    /**
     * 
     * @type {EcoType}
     * @memberof TripType
     */
    eco?: EcoType;
    /**
     * 
     * @type {Array<EcoType>}
     * @memberof TripType
     */
    readonly ecoCmp?: Array<EcoType>;
    /**
     * 
     * @type {Array<ServiceDays>}
     * @memberof TripType
     */
    readonly serviceDays?: Array<ServiceDays>;
    /**
     * 
     * @type {FreqType}
     * @memberof TripType
     */
    freq?: FreqType;
    /**
     * 
     * @type {LegList}
     * @memberof TripType
     */
    legList: LegList;
    /**
     * 
     * @type {TariffResult}
     * @memberof TripType
     */
    tariffResult?: TariffResult;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    calculation?: TripTypeCalculationEnum;
    /**
     * 
     * @type {Array<OccupancyType>}
     * @memberof TripType
     */
    readonly occupancy?: Array<OccupancyType>;
    /**
     * 
     * @type {ConnectionReliabilityType}
     * @memberof TripType
     */
    reliability?: ConnectionReliabilityType;
    /**
     * 
     * @type {TripStatusType}
     * @memberof TripType
     */
    tripStatus?: TripStatusType;
    /**
     * 
     * @type {Array<StopType>}
     * @memberof TripType
     */
    readonly via?: Array<StopType>;
    /**
     * 
     * @type {boolean}
     * @memberof TripType
     */
    alternative?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TripType
     */
    hasAlternative?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TripType
     */
    individualChangeTimes?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TripType
     */
    valid?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TripType
     */
    hasDelayInfo?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TripType
     */
    idx?: number;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    tripId?: string;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    ctxRecon?: string;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    ecoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    checksum?: string;
    /**
     * 
     * @type {number}
     * @memberof TripType
     */
    transferCount?: number;
    /**
     * 
     * @type {number}
     * @memberof TripType
     */
    combinedCount?: number;
    /**
     * 
     * @type {number}
     * @memberof TripType
     */
    calBurned?: number;
}


/**
 * @export
 */
export const TripTypeCalculationEnum = {
    Initial: 'INITIAL',
    RetrySharp: 'RETRY_SHARP',
    RetryUnsharp: 'RETRY_UNSHARP',
    RetryDoubleRadius: 'RETRY_DOUBLE_RADIUS',
    RetryUnsharpNewRadius: 'RETRY_UNSHARP_NEW_RADIUS',
    RetryPreselectionNewRadius: 'RETRY_PRESELECTION_NEW_RADIUS'
} as const;
export type TripTypeCalculationEnum = typeof TripTypeCalculationEnum[keyof typeof TripTypeCalculationEnum];


/**
 * Check if a given object implements the TripType interface.
 */
export function instanceOfTripType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "origin" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "legList" in value;

    return isInstance;
}

export function TripTypeFromJSON(json: any): TripType {
    return TripTypeFromJSONTyped(json, false);
}

export function TripTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TripType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'rtDuration': !exists(json, 'rtDuration') ? undefined : json['rtDuration'],
        'combinedMinDuration': !exists(json, 'combinedMinDuration') ? undefined : json['combinedMinDuration'],
        '_return': !exists(json, 'return') ? undefined : json['return'],
        'origin': OriginDestTypeFromJSON(json['Origin']),
        'destination': OriginDestTypeFromJSON(json['Destination']),
        'messages': !exists(json, 'Messages') ? undefined : MessagesFromJSON(json['Messages']),
        'notes': !exists(json, 'Notes') ? undefined : NotesFromJSON(json['Notes']),
        'eco': !exists(json, 'Eco') ? undefined : EcoTypeFromJSON(json['Eco']),
        'ecoCmp': !exists(json, 'EcoCmp') ? undefined : ((json['EcoCmp'] as Array<any>).map(EcoTypeFromJSON)),
        'serviceDays': !exists(json, 'ServiceDays') ? undefined : ((json['ServiceDays'] as Array<any>).map(ServiceDaysFromJSON)),
        'freq': !exists(json, 'Freq') ? undefined : FreqTypeFromJSON(json['Freq']),
        'legList': LegListFromJSON(json['LegList']),
        'tariffResult': !exists(json, 'TariffResult') ? undefined : TariffResultFromJSON(json['TariffResult']),
        'calculation': !exists(json, 'calculation') ? undefined : json['calculation'],
        'occupancy': !exists(json, 'Occupancy') ? undefined : ((json['Occupancy'] as Array<any>).map(OccupancyTypeFromJSON)),
        'reliability': !exists(json, 'reliability') ? undefined : ConnectionReliabilityTypeFromJSON(json['reliability']),
        'tripStatus': !exists(json, 'TripStatus') ? undefined : TripStatusTypeFromJSON(json['TripStatus']),
        'via': !exists(json, 'via') ? undefined : ((json['via'] as Array<any>).map(StopTypeFromJSON)),
        'alternative': !exists(json, 'alternative') ? undefined : json['alternative'],
        'hasAlternative': !exists(json, 'hasAlternative') ? undefined : json['hasAlternative'],
        'individualChangeTimes': !exists(json, 'individualChangeTimes') ? undefined : json['individualChangeTimes'],
        'valid': !exists(json, 'valid') ? undefined : json['valid'],
        'hasDelayInfo': !exists(json, 'hasDelayInfo') ? undefined : json['hasDelayInfo'],
        'idx': !exists(json, 'idx') ? undefined : json['idx'],
        'tripId': !exists(json, 'tripId') ? undefined : json['tripId'],
        'ctxRecon': !exists(json, 'ctxRecon') ? undefined : json['ctxRecon'],
        'ecoUrl': !exists(json, 'ecoUrl') ? undefined : json['ecoUrl'],
        'checksum': !exists(json, 'checksum') ? undefined : json['checksum'],
        'transferCount': !exists(json, 'transferCount') ? undefined : json['transferCount'],
        'combinedCount': !exists(json, 'combinedCount') ? undefined : json['combinedCount'],
        'calBurned': !exists(json, 'calBurned') ? undefined : json['calBurned'],
    };
}

export function TripTypeToJSON(value?: TripType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'duration': value.duration,
        'rtDuration': value.rtDuration,
        'combinedMinDuration': value.combinedMinDuration,
        'return': value._return,
        'Origin': OriginDestTypeToJSON(value.origin),
        'Destination': OriginDestTypeToJSON(value.destination),
        'Messages': MessagesToJSON(value.messages),
        'Notes': NotesToJSON(value.notes),
        'Eco': EcoTypeToJSON(value.eco),
        'Freq': FreqTypeToJSON(value.freq),
        'LegList': LegListToJSON(value.legList),
        'TariffResult': TariffResultToJSON(value.tariffResult),
        'calculation': value.calculation,
        'reliability': ConnectionReliabilityTypeToJSON(value.reliability),
        'TripStatus': TripStatusTypeToJSON(value.tripStatus),
        'alternative': value.alternative,
        'hasAlternative': value.hasAlternative,
        'individualChangeTimes': value.individualChangeTimes,
        'valid': value.valid,
        'hasDelayInfo': value.hasDelayInfo,
        'idx': value.idx,
        'tripId': value.tripId,
        'ctxRecon': value.ctxRecon,
        'ecoUrl': value.ecoUrl,
        'checksum': value.checksum,
        'transferCount': value.transferCount,
        'combinedCount': value.combinedCount,
        'calBurned': value.calBurned,
    };
}

