/* tslint:disable */
/* eslint-disable */
/**
 * Proxy API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConnectionReliabilityType
 */
export interface ConnectionReliabilityType {
    /**
     * 
     * @type {string}
     * @memberof ConnectionReliabilityType
     */
    original?: ConnectionReliabilityTypeOriginalEnum;
    /**
     * 
     * @type {string}
     * @memberof ConnectionReliabilityType
     */
    alternative?: ConnectionReliabilityTypeAlternativeEnum;
}


/**
 * @export
 */
export const ConnectionReliabilityTypeOriginalEnum = {
    Guaranteed: 'GUARANTEED',
    High: 'HIGH',
    Low: 'LOW',
    Abortive: 'ABORTIVE',
    Undef: 'UNDEF'
} as const;
export type ConnectionReliabilityTypeOriginalEnum = typeof ConnectionReliabilityTypeOriginalEnum[keyof typeof ConnectionReliabilityTypeOriginalEnum];

/**
 * @export
 */
export const ConnectionReliabilityTypeAlternativeEnum = {
    Guaranteed: 'GUARANTEED',
    High: 'HIGH',
    Low: 'LOW',
    Abortive: 'ABORTIVE',
    Undef: 'UNDEF'
} as const;
export type ConnectionReliabilityTypeAlternativeEnum = typeof ConnectionReliabilityTypeAlternativeEnum[keyof typeof ConnectionReliabilityTypeAlternativeEnum];


/**
 * Check if a given object implements the ConnectionReliabilityType interface.
 */
export function instanceOfConnectionReliabilityType(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConnectionReliabilityTypeFromJSON(json: any): ConnectionReliabilityType {
    return ConnectionReliabilityTypeFromJSONTyped(json, false);
}

export function ConnectionReliabilityTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionReliabilityType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'original': !exists(json, 'original') ? undefined : json['original'],
        'alternative': !exists(json, 'alternative') ? undefined : json['alternative'],
    };
}

export function ConnectionReliabilityTypeToJSON(value?: ConnectionReliabilityType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'original': value.original,
        'alternative': value.alternative,
    };
}

